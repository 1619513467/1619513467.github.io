<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ubuntu安装VMware15.0教程（含注册码）</title>
      <link href="/2020/06/16/Ubuntu%E5%AE%89%E8%A3%85VMware15.0%E6%95%99%E7%A8%8B/"/>
      <url>/2020/06/16/Ubuntu%E5%AE%89%E8%A3%85VMware15.0%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p> 1.去VMware官网 下载<a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html" target="_blank" rel="noopener">VMware Workstation</a><br><br> 地址：<a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html" target="_blank" rel="noopener">https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html</a><br> <img src="https://i.loli.net/2020/05/24/lyOQanbe49roidK.png" alt="VMware.png"></p><h1 id="下载目录"><a href="#下载目录" class="headerlink" title="下载目录"></a>下载目录</h1><p>2.在你的下载目录，打开终端（Ctrl+Alt+t）输入以下命令</p><pre><code>    sudo chmod +x VMware-Workstation-Full-15.5.2-15785246.x86_64.bundle    ./VMware-Workstation-Full-15.5.2-15785246.x86_64.bundle</code></pre><p>注意：不要盲目复制代码，可能下载的版本不同。文件名不同，就需要输入不同的命令。</p><h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><p>3.安装过程不再赘述了，基本和Windows安装VMware一样。<br>成功截图：<br><img src="https://i.loli.net/2020/06/16/WavPEjlURhJI4Yi.png" alt="2020-06-16 18-31-54屏幕截图.png"><br>安装完成可以使用</p><pre><code>sudo vmware-installer -l</code></pre><p>检测一下。<br><img src="https://i.loli.net/2020/06/16/rhaTfLkvm2XnAP8.png" alt="vmware.png"></p><h1 id="安装密钥"><a href="#安装密钥" class="headerlink" title="安装密钥"></a>安装密钥</h1><p>考虑到许多小伙伴安装需要密钥，所以小编在此列出几个密钥供大家参考使用。</p><pre><code>FA1J8-6WYEP-M803P-QPZ5T-XFKZ6FU5D0-FMGEK-H8E6Q-U4XG9-WCAA2VU30R-A5G4P-M801P-N7Z7C-XQUWACF79A-01Z5L-0891Z-5XY5Z-PVAUDFG14H-6VDEP-484HZ-KZQQZ-QP8Y6UA7WA-83Z11-080RY-4GYNX-MCRY4VV388-AGX86-H81XP-8WPZC-QKHV2AF35K-8GYD1-081LQ-74QZV-ZZ0T0ZF7N8-8GEEL-480UZ-8PZGT-MF2G2CC540-D9Z9M-4881P-8MMEE-ZV2DD</code></pre><h1 id="安装vmware-tool"><a href="#安装vmware-tool" class="headerlink" title="安装vmware tool"></a>安装vmware tool</h1>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html CSS 整理笔记</title>
      <link href="/2020/06/07/HTML%20CSS%20%E6%95%B4%E7%90%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/06/07/HTML%20CSS%20%E6%95%B4%E7%90%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>点击链接后退页面：<br>    <a href="javascript:history.go(-1)">回到上一个网页</a></p><h2 id="修改placeholder提示的样式："><a href="#修改placeholder提示的样式：" class="headerlink" title="修改placeholder提示的样式："></a>修改placeholder提示的样式：</h2><h3 id="除IE外通用写法"><a href="#除IE外通用写法" class="headerlink" title="除IE外通用写法"></a>除IE外通用写法</h3><p> 类名或标签名::placeholder {color: red;}</p><h3 id="加兼容前缀写法"><a href="#加兼容前缀写法" class="headerlink" title="加兼容前缀写法"></a>加兼容前缀写法</h3><h2 id="css超出一行显示省略号"><a href="#css超出一行显示省略号" class="headerlink" title="css超出一行显示省略号"></a>css超出一行显示省略号</h2><ul><li>给定宽度(width:100px)、</li><li>超出隐藏（overflow:hidden）、</li><li>强制在同一行显示（white-space: nowrap）、</li><li>省略号（text-overflow:ellipsis）</li></ul><h2 id="常见字体单位"><a href="#常见字体单位" class="headerlink" title="常见字体单位"></a>常见字体单位</h2><h3 id="1-em"><a href="#1-em" class="headerlink" title="1.em"></a>1.em</h3><p>相当于“倍”，比如设置当前的div的字体大小为1.5em，则当前的div的字体大小为：该div继承的父级字体大小*1.5。（根据他爸）</p><h3 id="2-rem"><a href="#2-rem" class="headerlink" title="2.rem"></a>2.rem</h3><p>r即root，始终相对于根节点html的font-size进行缩放。（根据祖先html）</p><h3 id="3-vh"><a href="#3-vh" class="headerlink" title="3.vh"></a>3.vh</h3><p>vh指当前屏幕可见高度的1%，即 height:100vh == height:100%;<br>区别：当元素没有内容时候，若设置height:100%该元素高度不会被撑开。但设置height:100vh，该元素会被撑开和屏幕高度一致。</p><h3 id="4-vw"><a href="#4-vw" class="headerlink" title="4.vw"></a>4.vw</h3><p>Viewport width 视窗宽度。1vw = 视窗宽度的1%，1vw就是当前屏幕宽度的1%<br>对比：<br>width:100%; 设置元素宽度占父元素的宽度100%。<br>width:100vw; 相对于屏幕可见宽度来设置，所以会出现50vw 比50%大的情况。</p><h2 id="HTML5基础"><a href="#HTML5基础" class="headerlink" title="HTML5基础"></a>HTML5基础</h2><pre><code>在网页中，HTML决定结构和内容，CSS设定网页的表现样式，JavaScript控制网页的行为。</code></pre><p><code>&lt;!DOCTYPE html&gt;</code>必须位于HTML文档第一行。<br><code>&lt;meta&gt;</code>标签：用于方便浏览器解析或搜索引擎搜索，一般放置于<code>&lt;head&gt;</code>中，用”名称/值”方式：</br><br>(1)表示文档内容类型、字符串编码信息</p><pre><code class="html">&lt;meta charset=&quot;UTF-8&quot;&gt;</code></pre><p>(2)为搜索引擎定义关键词: </p><pre><code class="html">&lt;meta name=&quot;keywords&quot; content=&quot;HTML,CSS,XML,XHTML,JavaScript&quot;&gt;</code></pre><p>(3)为网页定义描述内容:    </p><pre><code class="html">&lt;meta name=&quot;description&quot; content=&quot;Free Web tutorials on HTML and CSS&quot;&gt;</code></pre><p>(4)定义网页作者: </p><pre><code class="html">&lt;meta name=&quot;author&quot; content=&quot;Hege Refsnes&quot;&gt;</code></pre><p>(5)每30秒中刷新当前页面:   </p><pre><code class="html">&lt;meta http-equiv=&quot;refresh&quot; content=&quot;30&quot;&gt;</code></pre><h3 id="字体样式标签：-lt-strong-gt-字体变粗、-lt-em-gt-和-lt-i-gt-都有斜体的效果，区别-lt-em-gt-表示对内容的强调"><a href="#字体样式标签：-lt-strong-gt-字体变粗、-lt-em-gt-和-lt-i-gt-都有斜体的效果，区别-lt-em-gt-表示对内容的强调" class="headerlink" title="字体样式标签：&lt;strong&gt;字体变粗、&lt;em&gt;和&lt;i&gt;都有斜体的效果，区别&lt;em&gt;表示对内容的强调"></a>字体样式标签：<code>&lt;strong&gt;</code>字体变粗、<code>&lt;em&gt;</code>和<code>&lt;i&gt;</code>都有斜体的效果，区别<code>&lt;em&gt;</code>表示对内容的强调</h3><h3 id="注释-lt-内容-gt"><a href="#注释-lt-内容-gt" class="headerlink" title="注释&lt;!--内容--&gt;"></a>注释<code>&lt;!--内容--&gt;</code></h3><h3 id="常用转义字符："><a href="#常用转义字符：" class="headerlink" title="常用转义字符："></a>常用转义字符：</h3><pre><code>&amp;nbsp; //空格&amp;gt; //大于号&gt;&amp;lt; //小于号&lt;&amp;quot; //双引号&amp;copy; //版本符号 </code></pre><h3 id="常用图片格式：JPG、GIF、PNG、BMP"><a href="#常用图片格式：JPG、GIF、PNG、BMP" class="headerlink" title="常用图片格式：JPG、GIF、PNG、BMP"></a>常用图片格式：JPG、GIF、PNG、BMP</h3><h3 id="图片标签，必须要有src和alt属性："><a href="#图片标签，必须要有src和alt属性：" class="headerlink" title="图片标签，必须要有src和alt属性："></a>图片标签，必须要有src和alt属性：</h3><pre><code class="html">&lt;img src=&quot;图片地址&quot; alt=&quot;图片的替代文字&quot; title=&quot;鼠标悬停提示文字&quot; width=&quot;图片宽度&quot; height=&quot;图片高度&quot; /&gt;</code></pre><h3 id="超链接标签-target指定在哪个窗口打开-值有-self自身窗口、-blank新建窗口"><a href="#超链接标签-target指定在哪个窗口打开-值有-self自身窗口、-blank新建窗口" class="headerlink" title="超链接标签(target指定在哪个窗口打开 值有_self自身窗口、_blank新建窗口)"></a>超链接标签(target指定在哪个窗口打开 值有_self自身窗口、_blank新建窗口)</h3><pre><code class="html">&lt;a href=&quot;链接地址&quot; target=&quot;目标打开窗口位置&quot;&gt;附连接的文本或图像&lt;/a&gt;</code></pre><h3 id="链接地址"><a href="#链接地址" class="headerlink" title="链接地址"></a>链接地址</h3><p>(1)绝对路径(指向目标地址的完整描述 多指向本站点外的文件<br>如<code>&lt;a href=&quot;http://www.baidu.com/index.html&quot;&gt;百度&lt;/a&gt;)</code></br><br>(2)相对路径(一般指向本站点内的文件,如<code>&lt;a href=&quot;login/login.html&quot;&gt;登陆&lt;a&gt;</code>)</br><br>(3)相对路径中”../“表示当前目录的上级目录，”../../“表示上上级目录</p><h3 id="超链接的应用场合："><a href="#超链接的应用场合：" class="headerlink" title="超链接的应用场合："></a>超链接的应用场合：</h3><p>(1)页面间链接:</p><pre><code class="html">&lt;a href=&quot;login.html&quot; target=&quot;_blank&quot;&gt;为您跳转到登录页&lt;/a&gt;</code></pre><p>(2)锚链接：<br>先在目标位置B设置标记如：<code>&lt;a name=&quot;new&quot;&gt;</code>这里是目标位置<code>&lt;/a&gt;</code>，然后在A位置设置链接路径href属性值为”#标记名”如：<code>&lt;a href=&quot;#marker&quot;当前位置A&lt;/a&gt;</code><br>(3)功能性链接：单击时启动本机自带的应用程序如QQ、电子邮箱等<br>如电子邮件链接：”mailto:电子邮件地址”</p><h3 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h3><p>(1).块元素：如<code>&lt;p&gt;&lt;h1&gt;&lt;div&gt;</code>无论内容有多少，该元素都独占一行(一块)。<br>块状元素特点：如果没有设置自身宽度，则显示为父容器的100%。</br><br>(2).行内元素：如<code>&lt;strong&gt;&lt;a&gt;</code> 显示宽度由自己的内容决定，其他元素可以排在它后面。</p><h3 id="元素类型转换："><a href="#元素类型转换：" class="headerlink" title="元素类型转换："></a>元素类型转换：</h3><ol><li>块状元素转为内联元素：display: inline;</li><li>内联元素转为块状元素：display: block;</li><li>把元素设为内联块状元素： display: inline-block;<br>(就是同时具备内联元素、块状元素特点，如img、input)</li></ol><h2 id="列表、表格、媒体元素"><a href="#列表、表格、媒体元素" class="headerlink" title="列表、表格、媒体元素"></a>列表、表格、媒体元素</h2><h3 id="三种列表："><a href="#三种列表：" class="headerlink" title="三种列表："></a>三种列表：</h3><ol><li>有序列表<code>&lt;ol&gt;&lt;li&gt;</code></li><li>无序列表<code>&lt;ul&gt;&lt;li&gt;</code>ul中只能嵌套li，而li可以嵌套任意标签。</li><li>定义列表<code>&lt;dl&gt;&lt;dt&gt;&lt;dd&gt;</code> 是标题及列表项的结合。<h3 id="表格基本结构：单元格、行、列"><a href="#表格基本结构：单元格、行、列" class="headerlink" title="表格基本结构：单元格、行、列"></a>表格基本结构：单元格、行、列</h3>(1)<code>&lt;table&gt;&lt;tr&gt;&lt;th&gt;&lt;td&gt;</code></br><br>(2)HTML5中已废除table的border属性，用css控制边框宽度。</br><br>(3)跨列(横跨)：<code>&lt;td colspan=&quot;所跨的列数&quot;&gt;内容&lt;/td&gt;</code><br>跨行(竖跨)：<code>&lt;td rowspan=&quot;所跨行数&quot;&gt;内容&lt;/td&gt;</code>，两者都要删除被合并的其他单元格。</br><br>(4)表格特点：同行单元格高度一致且水平对齐，同列单元格宽度一致且垂直对齐。</li></ol><h3 id="视频元素："><a href="#视频元素：" class="headerlink" title="视频元素："></a>视频元素：</h3><p>(1)controls属性提供播放暂停和音量控件、autoplay属性自动播放、loop属性循环播放</p><pre><code class="html">&lt;video src=&quot;视频路径&quot; controls=&quot;controls&quot;&gt;你的浏览器不支持video标签&lt;/video&gt;</code></pre><p>(2)source元素链接不同的视频文件，浏览器会自动选择第一个可识别的格式：</p><pre><code class="html">&lt;video controls&gt;    &lt;source src=&quot;video/video.webm&quot; /&gt;    &lt;source src=&quot;video/video.mp4&quot; /&gt;你的浏览器不支持video标签&lt;video&gt;</code></pre><h3 id="音频元素：使用语法和视频元素一样，只要把video换成audio即可。"><a href="#音频元素：使用语法和视频元素一样，只要把video换成audio即可。" class="headerlink" title="音频元素：使用语法和视频元素一样，只要把video换成audio即可。"></a>音频元素：使用语法和视频元素一样，只要把video换成audio即可。</h3><h3 id="HTML5的结构元素-先划分结构再写内容-："><a href="#HTML5的结构元素-先划分结构再写内容-：" class="headerlink" title="HTML5的结构元素(先划分结构再写内容)："></a>HTML5的结构元素(先划分结构再写内容)：</h3><p>header(头部)、footer(脚部)、section(独立区域)、article(独立文章内容)、aside(相关内容或应用,常用于侧边栏)、nav(导航类辅助内容)</p><h3 id="iframe框架-方便在页面中引用站外的页面内容。"><a href="#iframe框架-方便在页面中引用站外的页面内容。" class="headerlink" title="iframe框架:方便在页面中引用站外的页面内容。"></a>iframe框架:方便在页面中引用站外的页面内容。</h3><pre><code class="html">&lt;iframe name=&quot;此框架的标识名&quot; src=&quot;引用的页面地址&quot;&gt;&lt;/iframe&gt;</code></pre><h3 id="iframe和锚链接的结合：使锚链接的内容在iframe框架中打开"><a href="#iframe和锚链接的结合：使锚链接的内容在iframe框架中打开" class="headerlink" title="iframe和锚链接的结合：使锚链接的内容在iframe框架中打开"></a>iframe和锚链接的结合：使锚链接的内容在iframe框架中打开</h3><pre><code class="html">&lt;iframe name=&quot;mainFrame&quot; src=&quot;框架引用的页面地址&quot; /&gt;&lt;a href=&quot;链接路径&quot; target=&quot;mainFrame&quot;&gt;点击在框架中打开&lt;/a&gt;</code></pre><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="表单标签form："><a href="#表单标签form：" class="headerlink" title="表单标签form："></a>表单标签form：</h3><pre><code class="html">&lt;form method=&quot;post&quot; action=&quot;login.html&quot; enctype=&quot;text/plain&quot;&gt;    表单内容&lt;/form&gt;</code></pre><p>(1)action=”url”属性意为把表单提交到某个页面,method=get|post意为向服务器发送数据的方式。</br><br>(2)提交方法：get提交,表单数据会在地址栏url中显示；而post提交不会显示，所以post提交更安全。</br><br>(3)enctype=”text/plain”指enctype 属性规定在发送到服务器之前应该如何对表单数据进行编码。text/plain     空格转换为加号+，但不对特殊字符编码。</p><h3 id="表单元素："><a href="#表单元素：" class="headerlink" title="表单元素："></a>表单元素：</h3><p>(1)表单元素 input 标签的属性：</p><pre><code>type(默认text,其他password,email,checkbox,radio,button,submit,reset,file,image,url,hidden,number,range,search等)、name、value(可选,该元素的初始值)、size(该元素的初始宽度)、maxlength(可输入的最大字符数)、checked(按钮被选中)</code></pre><p>(2)列表框 select  option 标签：</p><pre><code class="html">&lt;select&gt;中至少包含一个&lt;option&gt;。</code></pre><p>在 option 有多行选项需滚动查看时，size属性设置可提示看到的行数，selected属性默认选中该列表项。<br>(3)按钮：button普通(要和事件如onclick关联使用),submit(提交表单到action指定的url并传递表单数据),reset重置。要求美观可使用图片按钮</p><pre><code class="html">&lt;input type=&quot;image&quot; src=&quot;图片路径&quot;/&gt;</code></pre><p>(4)多行文本域：不能用value属性赋初始值</p><pre><code class="html">&lt;textarea name=&quot;标识名&quot; cols=&quot;显示的列数&quot; rows=&quot;显示的行数&quot;&gt;    自我评价    &lt;/textarea&gt;</code></pre><p>(5)数字number：限制输入的数据为数字，设定最大值最小值、合法的数据间隔step或默认值等</p><pre><code class="html">&lt;input type=&quot;number&quot; name=&quot;num&quot; min=&quot;0&quot; max=&quot;100&quot; step=&quot;10&quot;/&gt;</code></pre><p>(6)滑块range：作用和数字number一样，只是外观显示为用滑动条选择数值</p><pre><code class="html">&lt;input type=&quot;range&quot; name=&quot;range&quot; min=&quot;0&quot; max=&quot;100&quot; step=&quot;10&quot;/&gt;</code></pre><p>(7)search搜索框:在任意页面中用于输入搜索关键词的文本框</p><pre><code class="html">    &lt;input type=&quot;search&quot; name=&quot;sousuo&quot; /&gt;</code></pre><p>(8)文件域：多用于文件上传</p><pre><code class="html">&lt;input type=&quot;file&quot; name=&quot;files&quot;/&gt;&lt;input type=&quot;submit&quot; name=&quot;upfiles&quot; value=&quot;上传&quot;/&gt;</code></pre><p>(9)当表单数据包含普通数据、文件数据等多部分内容时，要设置表单的enctype编码属性为 multipart/form-data,表示把表单数据分为多部分提交。<br>(10)表单隐藏域hidden：数据不会页面中显示，但会随表单一同提交。</p><pre><code class="html">&lt;input type=&quot;hidden&quot; name=&quot;userid&quot; value=&quot;20&quot;/&gt;</code></pre><p>(11)表单元素 只读属性readonly、禁用disabled<br>(12)W3CHTML5标准中，规定对布尔类型的属性，属性值可以省略。<br>(13)表单元素的标注label：当点击标注的文本时，浏览器会自动对焦关联的表单元素，for属性规定label与哪个表单元素绑定。name和id属性必需。</p><pre><code class="html">&lt;label for=&quot;female&quot;&gt;女&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;female&quot; /&gt;</code></pre><h3 id="HTML5表单新标签"><a href="#HTML5表单新标签" class="headerlink" title="HTML5表单新标签"></a>HTML5表单新标签</h3><pre><code class="html">&lt;form&gt;    供用户输入的表单&lt;input&gt;    输入域&lt;textarea&gt;    文本域 (多行输入)&lt;label&gt;    定义 &lt;input&gt; 元素的标签，一般为输入标题&lt;fieldset&gt;    定义一组相关的表单元素，并使用外框包含起来&lt;legend&gt;    定义 &lt;fieldset&gt; 元素的标题&lt;select&gt;    下拉选项列表&lt;optgroup&gt;    选项组&lt;option&gt;    下拉列表中的选项&lt;button&gt;    点击按钮&lt;datalist&gt;    指定一个预先定义的输入控件选项列表&lt;keygen&gt;    定义了表单的密钥对生成器字段&lt;output&gt;    计算结果</code></pre><h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><p>(1)好处：减轻服务器的压力；保证数据的可行性和安全性。<br>(2)placeholder:为文本框提示用户输入</p><pre><code class="html">&lt;input type=&quot;text&quot; name=&quot;name&quot; placeholder=&quot;请输入你的姓名&quot;/&gt;</code></pre><p>(3)required：规定文本框不能为空</p><pre><code class="html">&lt;input type=&quot;email&quot; name=&quot;email&quot; required/&gt;</code></pre><p>(4)pattern：输入的内容必须符合正则表达式自定义的规则</p><pre><code class="html">&lt;input type=&quot;text&quot; name=&quot;tel&quot; required pattern=&quot;^1[35]\d{9}&quot;/&gt;规定以13、15开头的11位数字</code></pre><h2 id="CSS3基础"><a href="#CSS3基础" class="headerlink" title="CSS3基础"></a>CSS3基础</h2><h3 id="CSS：Cascading-Style-Sheet层叠样式表-又称风格样式表Style-Sheet，用于设计网页风格。"><a href="#CSS：Cascading-Style-Sheet层叠样式表-又称风格样式表Style-Sheet，用于设计网页风格。" class="headerlink" title="CSS：Cascading Style Sheet层叠样式表,又称风格样式表Style Sheet，用于设计网页风格。"></a>CSS：Cascading Style Sheet层叠样式表,又称风格样式表Style Sheet，用于设计网页风格。</h3><h3 id="CSS3的基本语法结构："><a href="#CSS3的基本语法结构：" class="headerlink" title="CSS3的基本语法结构："></a>CSS3的基本语法结构：</h3><p>(1)CSS中注释为 /<em>内容</em>/<br>(2)CSS规则由选择器、声明组成。<br>(3)声明必须放在大括号{}中，声明可以是一或多条。<br>(4)每条声明由一个属性和值组成，属性和值用冒号:分开，每条语句以分号;结尾如</p><pre><code class="html">&lt;style type=&quot;text/css&quot;&gt;    h1{    font-size : 12px;    color : red;            }&lt;/style&gt;</code></pre><h3 id="在HTML中引入CSS样式的方式："><a href="#在HTML中引入CSS样式的方式：" class="headerlink" title="在HTML中引入CSS样式的方式："></a>在HTML中引入CSS样式的方式：</h3><p>(1)行内样式：直接在标签中用style属性设置CSS 如:</p><pre><code class="html">&lt;p style=&quot;font-size:10px;&quot;&gt;字体大小&lt;/p&gt;</code></pre><p>(2)内部样式表：把css写在head的 style 中，规范化应为</p><pre><code class="html">&lt;style type=&quot;text/css&quot;&gt;</code></pre><p>(3)外部样式表：文件扩展名为.css，在外部样式表中不需要 style 标签。<br>a.链接式引用外部样式表：</p><pre><code class="html">&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot;/&gt;</code></pre><p>b.导入式引用外部样式表：</p><pre><code class="html">&lt;style type=&quot;text/css&quot;&gt;@import url(&quot;css/stype.css&quot;);</code></pre><h3 id="样式优先级：”就近原则”，行内样式-gt-内部样式表-gt-外部样式表"><a href="#样式优先级：”就近原则”，行内样式-gt-内部样式表-gt-外部样式表" class="headerlink" title="样式优先级：”就近原则”，行内样式&gt;内部样式表&gt;外部样式表"></a>样式优先级：”就近原则”，行内样式&gt;内部样式表&gt;外部样式表</h3><p>当有很多样式时，用 !important 可以为某一个样式覆盖掉其他所有样式。<br>如 #textcolor{ clor:pink !important;}</p><h3 id="CSS选择器命名规范：驼峰命名法，用语义化单词命名且不能和ID选择器同名"><a href="#CSS选择器命名规范：驼峰命名法，用语义化单词命名且不能和ID选择器同名" class="headerlink" title="CSS选择器命名规范：驼峰命名法，用语义化单词命名且不能和ID选择器同名."></a>CSS选择器命名规范：驼峰命名法，用语义化单词命名且不能和ID选择器同名.</h3><h3 id="CSS3的基本选择器"><a href="#CSS3的基本选择器" class="headerlink" title="CSS3的基本选择器"></a>CSS3的基本选择器</h3><p>(1)标签选择器：以标签名作选择器的名称如 h1{color:red;}</br><br>(2)类选择器：选择器名可自定义如 .red{color:red;}同时要设置&lt;标签 class=”red”&gt;内容&lt;/标签&gt;</br><br>(3)ID选择器：选择器名可自定义如 #red{color:red;}同时要设置&lt;标签 id=”red”&gt;内容&lt;/标签&gt;，但同一个id属性的选择器在页面中只能用一次。</p><h3 id="基本选择器的优先级：ID选择器-gt-类选择器-gt-标签选择器"><a href="#基本选择器的优先级：ID选择器-gt-类选择器-gt-标签选择器" class="headerlink" title="基本选择器的优先级：ID选择器&gt;类选择器&gt;标签选择器"></a>基本选择器的优先级：ID选择器&gt;类选择器&gt;标签选择器</h3><h3 id="CSS3的高级选择器"><a href="#CSS3的高级选择器" class="headerlink" title="CSS3的高级选择器"></a>CSS3的高级选择器</h3><h4 id="层次选择器："><a href="#层次选择器：" class="headerlink" title="层次选择器："></a>层次选择器：</h4><p>(1)后代选择器A B{ }：中间用空格隔开，只要是A的后代元素都会被选中。</br><br>(2)子选择器A&gt;B{ }：只能选择A的子元素。</br><br>(3)相邻兄弟选择器A+B{ }：只用于A后面一个同级元素</br><br>(4)通用兄弟选择器A~B{ }：用于A后面所有的同级元素</p><h4 id="结构伪类选择器：根据文档对象模型DOM的节点-元素级别-来操作。"><a href="#结构伪类选择器：根据文档对象模型DOM的节点-元素级别-来操作。" class="headerlink" title="结构伪类选择器：根据文档对象模型DOM的节点(元素级别)来操作。"></a>结构伪类选择器：根据文档对象模型DOM的节点(元素级别)来操作。</h4><p>(1)B:first-child    作为父元素的第一个子元素B，作用和(3)相似</br><br>(2)B:last-child    作为父元素的最后一个子元素B</br><br>(3)A B:nth-child(n)    在父级中查第n个子元素是不是B，不分类型</br><br>(4)B:first-of-type     选择父元素内B类型的第一个元素B</br><br>(5)B:last-of-type    选择父元素内B类型的最后一个元素B</br><br>(6)A B:nth-of-type(n) 在父级里先是不是B类型，再看位置n</p><h4 id="属性选择器："><a href="#属性选择器：" class="headerlink" title="属性选择器："></a>属性选择器：</h4><p>(1)A[arrt]  选择包含属性arrt的A标签(也可写多个属性，但要同时存在)</br><br>(2)A[arrt = val]  选择包含属性arrt,且属性值=val(区分大小写)的A标签</br><br>(3)A[arrt ^= val] 选择包含属性arrt,且属性值以val开头的任意字符串</br><br>(4)A[arrt $= val] 选择包含属性arrt,且属性值以val结尾的任意字符串</br><br>(5)A[arrt *= val] 选择包含属性arrt,且属性值包含val字符串的A标签</p><h2 id="CSS3美化网页"><a href="#CSS3美化网页" class="headerlink" title="CSS3美化网页"></a>CSS3美化网页</h2><h3 id="CSS3设置文本样式："><a href="#CSS3设置文本样式：" class="headerlink" title="CSS3设置文本样式："></a>CSS3设置文本样式：</h3><p>(1) span 标签：用来设置行内元素(或几个文字)的样式。</br><br>(2)字体样式：</p><pre><code class="html">font-size：常用单位pxfont-family：若同时设中英文字体，英文字体要设置在中文字体前面font-style：normal标准、italic斜体、oblique倾斜font-variant：small-caps; 字体设置为新型的大写字母，所有小写字母都转换为大写。font-weight：normal标准、bold粗、bolder更粗、lighter细、100-900数字越大越粗font：一次设置字体所有属性，顺序为&quot;字体风格-粗细-大小-类型&quot;如 font:italic bold 36px &quot;宋体&quot;;</code></pre><p>(3)用font简写方式至少要指定 font-size和 font-family 属性，其他的属性(如font-weight、font-style、font-variant、line-height)如未指定将使用默认值。缩写时 font-size 与 line-height中间要加”/“斜扛如 “12px/1.5em”</p><h4 id="Text-transform：控制文本的大小写："><a href="#Text-transform：控制文本的大小写：" class="headerlink" title="Text-transform：控制文本的大小写："></a>Text-transform：控制文本的大小写：</h4><pre><code class="html">none         默认，定义既有小写字母也有大写字母的标准文本(原文)capitalize     每个单词以大写字母开头uppercase     全部为大写字母lowercase     全部小写字母inherit     从父元素继承text-transform属性的值。</code></pre><h4 id="direction属性：规定文本的方向-书写方向。"><a href="#direction属性：规定文本的方向-书写方向。" class="headerlink" title="direction属性：规定文本的方向/书写方向。"></a>direction属性：规定文本的方向/书写方向。</h4><pre><code>ltr    文本方向从左到右rtl    方向从右到左inherit 继承父元素direction属性的值。</code></pre><h4 id="文字排版"><a href="#文字排版" class="headerlink" title="文字排版"></a>文字排版</h4><p>(1)适用大多数浏览器：<br>    从左向右 writing-mode: vertical-lr;<br>    从右向左 writing-mode: vertical-rl; </br><br>(2)只适用IE浏览器:<br>    从左向右 writing-mode: tb-lr;<br>    从右向左 writing-mode: tb-rl。</p><h3 id="排版网页文本"><a href="#排版网页文本" class="headerlink" title="排版网页文本"></a>排版网页文本</h3><p>(1)color文本颜色:<br>    RGB：如color:#FF0000; 另一种方法rgb(r,g,b)其中三个参数取整0<del>255<br>    RGBA：在RGB基础上加控制alpha透明度的参数，取值0</del>1，0表示完全透明<br>(2)text-align水平对齐:<br>    left左(默认)、center中间、right右、justify两端对齐</br><br>(3)text-indent首行缩进：2em或2px 缩进两个字符</br><br>(4)text-height文本行高: 单位px或 按倍数(行高是字体大小的倍数)</br><br>(5)text-decoration文本装饰：<br>none默认无、underline下划线、overline上划线、line-through删除线</br><br>(6)vertical-align垂直对齐：只能作用于table表格单元格的对象:<br>    top顶、middle居中、bottom底</br><br>(7)text-shadow文本阴影：<br>语法”text-shadow:阴影颜色 x轴位移(x-offset) y轴位移(y-offset) 模糊半径(blur-radius);”如text-shadow: blue 10px 10ox 2px;</br><br>(8)查询浏览器是否支持HTML5及CSS3属性的网址 <a href="http://www.caniuse.com" target="_blank" rel="noopener">www.caniuse.com</a></p><h4 id="CSS3设置超链接样式："><a href="#CSS3设置超链接样式：" class="headerlink" title="CSS3设置超链接样式："></a>CSS3设置超链接样式：</h4><p>伪类:根据标签处于某种行为或状态来修饰超链接样式。其他标签如p可以使用hover和active。语法”标签名:伪类名{声明;}”</br><br>(1)a:link    未访问前的超链接</br><br>(2)a:visited 访问过后</br><br>(3)a:hover    鼠标移到链接上</br><br>(4)a:link    鼠标点击未释放</br><br>(5)设置伪类的顺序：a:link - a:visited - a:hover - a:active</br><br>(6)虽有四种样式,但实际开发中只设置 a 标签选择器样式、鼠标悬浮链接样式</p><h3 id="CSS3设置列表样式"><a href="#CSS3设置列表样式" class="headerlink" title="CSS3设置列表样式"></a>CSS3设置列表样式</h3><p>(1)list-style-type：列表项标记类型<br>none无符号、decimal数字、disc实心圆(默认)、circle空心圆、square实心正方形</br><br>(2)list-style-image：用图像做列表项标记</br><br>(3)list-style-position：设置列表项标记的位置</br><br>(4)list-style：一次设置列表的所有属性 (属性值为none时说明列表无样式)<br>顺序为 list-style-type + list-style-position + list-style-image </p><h3 id="div-标签：用于网页布局，把HTML文档分成独立不同的部分。"><a href="#div-标签：用于网页布局，把HTML文档分成独立不同的部分。" class="headerlink" title="div 标签：用于网页布局，把HTML文档分成独立不同的部分。"></a>div 标签：用于网页布局，把HTML文档分成独立不同的部分。</h3><h3 id="CSS3设置背景样式："><a href="#CSS3设置背景样式：" class="headerlink" title="CSS3设置背景样式："></a>CSS3设置背景样式：</h3><p>(1)background-color：背景色不能继承，其默认值是透明transparent    </br><br>(2)background-image：url(图片路径)、none(不显示背景图像)</br><br>(3)background-repeat：背景图像重复平铺<br>repeat(沿水平和垂直方向)、no-repeat(不平铺,只显示一次)、<br>repeat-x(只沿水平方向)、repeat-y(只沿垂直方向)、</p><p>(4)background-position：背景图的位置(X水平Y垂直方向的偏移量，如果只有一个方向关键字，则默认另一个关键字为center)</br><br>    1.Xpos Ypos:如 0px 0px：默认无偏移,从左上角出现<br>        30px 40px：正向偏移,图像向右和向下出现<br>        -50px -60px：反向偏移,图像向左和向上出现 </br><br>    2.X% Y%：如30% 50%(水平方向偏移30%，垂直方向居中)</br><br>    3.X水平关键词(left,center,right)、Y垂直关键词(top,center,bottom)<br>(5)background：一次设置背景的所有属性<br>(6)background-size背景图片尺寸：<br>auto(保持图片原尺寸,不易失真)、cover(放大填满容器标签)、<br>百分比percentage、contain(按照图片本身的宽高比例适应定义背景的区域)</p><h3 id="gradient线性渐变：颜色沿着一条直线方向过渡"><a href="#gradient线性渐变：颜色沿着一条直线方向过渡" class="headerlink" title="gradient线性渐变：颜色沿着一条直线方向过渡"></a>gradient线性渐变：颜色沿着一条直线方向过渡</h3><p>(1)常规语法：” linear-gradient(position, color1, color2,…)”</br><br>(2)浏览器兼容语法：” -兼容前缀-linear-gradient(position,color1,color2,…)”</br><br>(3)渐变的直线方向：<br>to left  从右向左、to top left 向左上方、to bottom left  向左下方、<br>to right 从左向右、to top right向右上方、to bottomo right向右下方、<br>to bottom从上向下、to top 从下向上、</p><h3 id="CSS3径向渐变radial-gradient：圆形渐变，颜色从一个起点朝所有方向混合，语法和线性渐变相似。"><a href="#CSS3径向渐变radial-gradient：圆形渐变，颜色从一个起点朝所有方向混合，语法和线性渐变相似。" class="headerlink" title="CSS3径向渐变radial-gradient：圆形渐变，颜色从一个起点朝所有方向混合，语法和线性渐变相似。"></a>CSS3径向渐变radial-gradient：圆形渐变，颜色从一个起点朝所有方向混合，语法和线性渐变相似。</h3><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h3 id="盒子模型的组成："><a href="#盒子模型的组成：" class="headerlink" title="盒子模型的组成："></a>盒子模型的组成：</h3><p>content网页内容、border边框、padding内边距、margin外边距</br><br>(1)边框border：</br><br>border-color 边框颜色：如border-color:#369 #000 #111 #F00;按“上右下左顺时针”设置</br><br>border-width 边框粗细：如细thin、中等medium、粗的thick</br><br>border-style 边框样式：常用none无边框、dotted点线边框、dashed虚线边框、solid实线边框</br><br>border 简写:如下边框border-bottom:9px red dashed;四条边框</br>border:9px blue solid;</br><br>(2)margin外边距：盒子边框以外和其他盒子间的距离<br>margin-top:上外边距、</br>margin-bottom：下外边距</br><br>margin-left：左外边距、</br>margin-right：右外边距</br><br>margin：简写”上右下左”</br><br>auto：设置盒子在它的父容器里居中显示。如margin:0px auto;让整个盒子居中。如果将元素的 margin设为负值，则元素会变大。<br>(块元素可以把左右页边距设置为”自动”中心对齐。margin:auto;但前提宽度不能是100%)</p><p>注意：很多标签都有自身默认的外边距，所以一般用并集选择器统一设置这些标签的外边距为0px,这样不会产生不必要的空隙。<br>如清除body和h2自带的外边距 body,h2{margin:0px;}</p><p>(3)padding内边距：<br>padding-left、padding-right、padding-top、padding-bottom、padding”上右下左”</p><h3 id="盒子模型的尺寸："><a href="#盒子模型的尺寸：" class="headerlink" title="盒子模型的尺寸："></a>盒子模型的尺寸：</h3><p>增加边框、内边距、外边距后不会影响内容区域的尺寸，但会增加盒子模型的总尺寸。<br>(1)内盒总尺寸 = border(上下/左右)+padding(上下/左右)+内容宽/高度<br>(2)整个盒子的宽度 = 内容宽度+左右padding+左右边框border+左右margin</p><h3 id="box-sizing拯救布局"><a href="#box-sizing拯救布局" class="headerlink" title="box-sizing拯救布局"></a>box-sizing拯救布局</h3><p>(语法)box-sizing:content-box、border-box、inherit<br>(1)content-box：盒子的宽度或高度=border+padding+(margin)+width/height<br>(2)border-box：盒子的宽或高度等于元素内容的宽或高度<br>    (即 该内容宽/高度=盒子宽/高度-border-padding )<br>(3)inherit：使元素继承父元素的盒子模型模式。</p><h3 id="border-radius圆角边框：语法和边框相似，只是四个边框带圆角"><a href="#border-radius圆角边框：语法和边框相似，只是四个边框带圆角" class="headerlink" title="border-radius圆角边框：语法和边框相似，只是四个边框带圆角"></a>border-radius圆角边框：语法和边框相似，只是四个边框带圆角</h3><p>(语法)border-radius:length{1~4个数字};<br>(1)用border-radius制作特殊图形<br>    圆形：元素的宽度和高度必须相同。圆角半径为元素宽度的一半，或直接设圆角半径为50%<br>    半圆形：元素的高度是宽度的2倍，且圆角半径为元素的宽度值。<br>    扇形：即制作四分之一圆形。”三同”元素宽度、高度、圆角半径 “一不同”</p><h3 id="盒子阴影：和文本阴影相似"><a href="#盒子阴影：和文本阴影相似" class="headerlink" title="盒子阴影：和文本阴影相似"></a>盒子阴影：和文本阴影相似</h3><p>(语法)box-shadow:inset x-offset y-offset blur-radius color;<br>inset：内部阴影，可选。<br>x-offset：X轴水平位移，正值在右，负值在左。<br>y-offset：Y轴垂直位移，正值在下，负值在上。<br>blur-radius：模糊半径可选，只能&gt;=0 值越大阴影向外面积越大,边缘越模糊。</p><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><h3 id="标准文档流：元素根据块元素或行内元素的特性从上到下，从左到右的方式自然排列。"><a href="#标准文档流：元素根据块元素或行内元素的特性从上到下，从左到右的方式自然排列。" class="headerlink" title="标准文档流：元素根据块元素或行内元素的特性从上到下，从左到右的方式自然排列。"></a>标准文档流：元素根据块元素或行内元素的特性从上到下，从左到右的方式自然排列。</h3><h3 id="display属性：用于指定标签的显示方式"><a href="#display属性：用于指定标签的显示方式" class="headerlink" title="display属性：用于指定标签的显示方式"></a>display属性：用于指定标签的显示方式</h3><pre><code>block：块元素的默认值，该元素前后自带换行符inline：行内元素的默认值，元素会显示为行内元素inline-block：行内块元素，兼具行内元素和块元素的特性none：元素不会显示</code></pre><h3 id="Float：指定网页元素向哪个方向浮动"><a href="#Float：指定网页元素向哪个方向浮动" class="headerlink" title="Float：指定网页元素向哪个方向浮动"></a>Float：指定网页元素向哪个方向浮动</h3><p>left左、right右、none默认无(元素不浮动 显示在其文本出现的位置)<br>元素的水平方向浮动，意味着元素只能左右移动而不能上下移动。<br>一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。<br>浮动元素之后的元素将围绕它。<br>浮动元素之前的元素将不会受到影响。<br>如果是右浮动，后面的文本流将环绕在它左边：</p><h3 id="clear清除浮动：当子元素全部浮动了，父级将包不住子元素会造成边框塌陷，所以要清除浮动元素对其他元素的影响。"><a href="#clear清除浮动：当子元素全部浮动了，父级将包不住子元素会造成边框塌陷，所以要清除浮动元素对其他元素的影响。" class="headerlink" title="clear清除浮动：当子元素全部浮动了，父级将包不住子元素会造成边框塌陷，所以要清除浮动元素对其他元素的影响。"></a>clear清除浮动：当子元素全部浮动了，父级将包不住子元素会造成边框塌陷，所以要清除浮动元素对其他元素的影响。</h3><h3 id="clear属性：规定元素的哪一侧不允许其他浮动元素。"><a href="#clear属性：规定元素的哪一侧不允许其他浮动元素。" class="headerlink" title="clear属性：规定元素的哪一侧不允许其他浮动元素。"></a>clear属性：规定元素的哪一侧不允许其他浮动元素。</h3><pre><code>left(左侧不允许浮动元素)、right(右侧不允许)、both(左右都不允许，常用于文本在图片下方显示)、none(允许浮动元素出现在两侧)</code></pre><h3 id="解决父级边框塌陷"><a href="#解决父级边框塌陷" class="headerlink" title="解决父级边框塌陷"></a>解决父级边框塌陷</h3><p>(1)浮动元素后加空的div，该div样式要设置clear:both;margin:0px;padding:0px;<br>(2)设置父元素固定高度把边框撑开。<br>(3)父级添加overflow属性:设置外层盒子的overflow:hidden。但此方法不能用于有下拉列表框的场景。<br>(4)父级添加伪类after，推荐。</p><h3 id="Overflow属性：溢出处理，也可用于扩展盒子高度。"><a href="#Overflow属性：溢出处理，也可用于扩展盒子高度。" class="headerlink" title="Overflow属性：溢出处理，也可用于扩展盒子高度。"></a>Overflow属性：溢出处理，也可用于扩展盒子高度。</h3><p>visible 默认溢出内容可见，显示在盒子外面<br>(1) hidden  多出来的内容被隐藏且没有滚动条<br>(2) scroll  有垂直水平2条滚动条，可查看多余内容<br>(3) auto    如果内容溢出，自动显示滚动条(只有垂直条)查看<br>(4) inherit 继承父特性</p><h2 id="定位网页元素"><a href="#定位网页元素" class="headerlink" title="定位网页元素"></a>定位网页元素</h2><h3 id="Position属性：指定盒子的位置，相对它父级的位置或它自身应该在的位置。"><a href="#Position属性：指定盒子的位置，相对它父级的位置或它自身应该在的位置。" class="headerlink" title="Position属性：指定盒子的位置，相对它父级的位置或它自身应该在的位置。"></a>Position属性：指定盒子的位置，相对它父级的位置或它自身应该在的位置。</h3><p>(1)static 默认无定位，元素按照标准文档布局。<br>(2)relative相对定位<br>a.特性:<br>    1.以标准文档流排版为基础，相当于它在原来位置偏移指定的距离。<br>    2.元素位置偏移后，仍会保留原位置。<br>    3.层级提高，可以遮盖标准文档流元素和浮动元素。<br>b.使用场景：<br>    相对定位可以不设偏移量，让后面的绝对定位以它为祖先元素作基准定位。<br>c.语法 position:relative,指定偏移量时：水平left(正值向右移)、right(正值向左),垂直top(正值向下)、bottom(正值向上)。如</p><pre><code class="html">div{     position: relative;    top:-20px;    left:20px;}</code></pre><p>(3)absolute绝对定位<br>a.特性：<br>    1.以已定位的祖先元素作基准定位，如果没有定位的祖先元素，则以浏览器窗口为基准定位。<br>    2.元素位置偏移后，不保留原位置(其他元素可以用它原来的空位)<br>    3.层级提高，可以遮盖标准文档流元素和浮动元素。<br>    4.设置绝对定位的元素脱离文档流，对其他盒子的定位无影响<br>b.使用场景：下拉菜单、焦点图轮播、弹出数字气泡、特别花边等。</p><p>(4)fixed固定定位<br>a.特性：直接以浏览器窗口为基准定位，偏移位置不受窗口滚动条滚动的影响。<br>b.使用场景：窗口边缘的固定广告、返回顶部图标、边缘固定导航栏等。</p><h3 id="z-index属性：设置定位元素的堆叠顺序。默认值0，值大的层位于值小层的上方。"><a href="#z-index属性：设置定位元素的堆叠顺序。默认值0，值大的层位于值小层的上方。" class="headerlink" title="z-index属性：设置定位元素的堆叠顺序。默认值0，值大的层位于值小层的上方。"></a>z-index属性：设置定位元素的堆叠顺序。默认值0，值大的层位于值小层的上方。</h3><p>(1)网页中的元素都含有两个堆叠层级，一个是未设置绝对定位时所处的环境，此时z-index是0；另一个是设置绝对定位时所处的堆叠环境，此时层的位置由z-index的值确定。</p><h3 id="设置元素透明度的方法-通常两种方法搜设置以适应所有浏览器兼容"><a href="#设置元素透明度的方法-通常两种方法搜设置以适应所有浏览器兼容" class="headerlink" title="设置元素透明度的方法(通常两种方法搜设置以适应所有浏览器兼容)"></a>设置元素透明度的方法(通常两种方法搜设置以适应所有浏览器兼容)</h3><p>(1)opacity:x           x值为0<del>1，值越小越透明<br>(2)filter:alpha(opacity=x) x值为0</del>100，值越小越透明</p><h2 id="CSS3做网页动画"><a href="#CSS3做网页动画" class="headerlink" title="CSS3做网页动画"></a>CSS3做网页动画</h2><h3 id="transform变形："><a href="#transform变形：" class="headerlink" title="transform变形："></a>transform变形：</h3><p>指效果的集合，如平移、旋转、缩放、倾斜效果。<br> 语法 transform:[transform-function]*;<br> 其中transform-function是变形函数，如要设置多个，则中间以空格分开。在用2D变形时要加浏览器兼容性前缀。</p><p>常用2D变形函数如下：<br>(1)translate(tx,ty)：<br>平移函数，将元素从原位置(基于X,Y坐标)移动到指定位置上。<br>tx表示X轴(横坐标)上移动的向量长度，正值向右，负值向左。<br>ty表示Y轴(纵坐标)上移动的向量长度，正值向下，负值向上。</p><p>(2)scale(sx,sy)：<br>缩放函数，定义宽高度(元素尺寸)的缩放比例，默认值1。0~0.99缩小，大于1放大。<br>sx表示宽度即横坐标方向的缩放量。<br>sy表示高度即纵坐标方向的缩放量。</p><p>(3)rotate(a)；<br>旋转函数，只取一个值为度数值,单位deg表示角度°<br>正值顺时针转，负值逆时针转。<br>rotate函数只旋转，不改变元素形状。</p><p>(4)skew(ax,ay)：<br>倾斜函数，取值为度数值，单位deg<br>ax表示水平方向即X轴的倾斜角度。<br>ay表示垂直方向即Y轴的倾斜角度。</p><h3 id="3D变形函数：translate3d-平移函数、scale3d-缩放函数、rotate3d-旋转函数"><a href="#3D变形函数：translate3d-平移函数、scale3d-缩放函数、rotate3d-旋转函数" class="headerlink" title="3D变形函数：translate3d()平移函数、scale3d()缩放函数、rotate3d()旋转函数"></a>3D变形函数：translate3d()平移函数、scale3d()缩放函数、rotate3d()旋转函数</h3><h3 id="transition过渡："><a href="#transition过渡：" class="headerlink" title="transition过渡："></a>transition过渡：</h3><p>指动画转换的过程，如渐现、渐弱、动画快慢等。<br>通过指定属性的初始状态、结束状态，在两个状态间通过平滑过渡的方式实现动画。<br>语法:[transition-property  transition-duration<br>         transition-timing-function  transition-delay]*<br>(速记法)transition: 过渡属性 过渡用时 过渡的动画函数 过渡的延迟时间</p><p>主要包括四个属性值：<br>(1)transition-property：<br>   过渡属性，设置过渡或动态模拟的CSS属性<br>(2)transition-duration：<br>   过渡用时，从旧属性到新属性的用时，单位为s<br>(3)transition-timing-function：<br>   指定过渡函数、过渡速度,有以下方式：<br>    ease    速度由快到慢，逐渐变慢(默认)<br>    liner    匀速<br>    ease-in  越来越快(渐显)<br>    ease-out 越来越慢(渐隐)<br>    ease-in-out 先加速再减速(渐显渐隐)<br>(4)transition-delay：设置过渡是否延迟时间执行。<br>注意：transition-duration指完成过渡需要的时间；transition-delay指过渡在什么时间之后触发。</p><h3 id="总结如何用transition实现过渡动画："><a href="#总结如何用transition实现过渡动画：" class="headerlink" title="总结如何用transition实现过渡动画："></a>总结如何用transition实现过渡动画：</h3><p>(1)在默认样式中声明元素的初始状态。<br>(2)声明过渡元素之中状态样式，如悬浮状态<br>(3)在默认样式中通过添加过渡函数，添加不同的样式。</p><h3 id="过渡的触发机制："><a href="#过渡的触发机制：" class="headerlink" title="过渡的触发机制："></a>过渡的触发机制：</h3><p>(1)伪类触发:  :hover、 :active、 :focus、 :checked等<br>(2)媒体查询：通过@media属性判断设备的尺寸、方向等。<br>(3)JavaScript触发：用JavaScript脚本触发。</p><h3 id="animation动画"><a href="#animation动画" class="headerlink" title="animation动画"></a>animation动画</h3><p>animation制作动画的步骤:<br>(1)通过类似Flash动画的关键帧(@keyframes)声明一个动画；<br>其中@keyframes称为关键帧，可以设置多段属性。语法</p><pre><code class="html"> @keyframes 动画名称{    from{ //css样式代码 }    百分比1{ //css样式 }    百分比2{ //css样式 }    100%{ //css样式 } }</code></pre><p>(2)找到要设置动画的元素，调用关键帧已声明的动画。<br>如 animation: spread(动画名) 2s linear(匀速);</p><h3 id="animation动画的语法和属性："><a href="#animation动画的语法和属性：" class="headerlink" title="animation动画的语法和属性："></a>animation动画的语法和属性：</h3><p>“ animation: 动画名称 播放时间 播放方式 开始播放的时间 播放次数 播放方向 播放状态 动画时间之外的状态 “<br>其中属性分别为：</p><pre><code>animation-name 动画名称、animation-duration 播放时间、animation-timing-function 播放方式、animation-delay 开始播放的时间、animation-iteration-count 播放次数(无限次用infinite)、animation-diriection 播放方向、animation-play-state 播放状态、animation-fill-mode 动画时间之外的状态、</code></pre><h2 id="其他HTML部分"><a href="#其他HTML部分" class="headerlink" title="其他HTML部分"></a>其他HTML部分</h2><p>utf-8 和 utf8的使用<br>只有MySQL可以用”utf8”，但其他地方一律使用大写”UTF-8”。<br>网页推荐使用长后缀名.html</p><p>有的浏览器中直接输出中文会出现中文乱码，可加声明</p><pre><code class="html">&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;img src=&quot;地址&quot; alt=&quot;图片代替文字&quot; title=&quot;鼠标悬停提示&quot; width=&quot;&quot; height=&quot;&quot;/&gt;</code></pre><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>1.页面间链接：A页到B页 主要运用于网页导航</p><pre><code class="html">&lt;a href=&quot;链接网址&quot; target=&quot;目标&quot;&gt;页面间链接&lt;/a&gt;</code></pre><h3 id="锚链接：A页甲位置到A页的乙位置或A页甲位置到B页的乙位置-跳其他页面要为href-”页面名-html-锚链接”"><a href="#锚链接：A页甲位置到A页的乙位置或A页甲位置到B页的乙位置-跳其他页面要为href-”页面名-html-锚链接”" class="headerlink" title="锚链接：A页甲位置到A页的乙位置或A页甲位置到B页的乙位置  #  跳其他页面要为href=”页面名.html#锚链接”"></a>锚链接：A页甲位置到A页的乙位置或A页甲位置到B页的乙位置  #  跳其他页面要为href=”页面名.html#锚链接”</h3><pre><code class="html">&lt;a name=wo&gt;&lt;/a&gt;&lt;a href=#wo&gt;锚链接&lt;/a&gt;</code></pre><h3 id="功能性链接：在页面中调用其他软件功能，如电子邮件-quot-mailto-bdqn-cn-quot-qq-msn"><a href="#功能性链接：在页面中调用其他软件功能，如电子邮件-quot-mailto-bdqn-cn-quot-qq-msn" class="headerlink" title="功能性链接：在页面中调用其他软件功能，如电子邮件&quot;mailto: @bdqn.cn&quot; qq msn"></a>功能性链接：在页面中调用其他软件功能，如电子邮件<code>&quot;mailto: @bdqn.cn&quot; qq msn</code></h3><pre><code class="html">&lt;a href=&quot;mailto:bdqnWebmaster@bdqn.cn&quot; target=&quot;_blank&quot;&gt;功能性链接&lt;/a&gt;</code></pre><p> a 标签链接Email地址，使用mailto能发送电子邮件。<br>如果mailto后面同时有多个参数，第一个参数必须以“?”开头，后面的参数每一个都以“&amp;”分隔。</p><pre><code class="html">&lt;a href=&quot;mailto:xxx@qq.com?subject=主题名称 &amp;body=邮件内容&quot;&gt;</code></pre><h3 id="title属性：鼠标滑过链接时显示该属性的内容。方便搜索引擎了解链接地址的内容"><a href="#title属性：鼠标滑过链接时显示该属性的内容。方便搜索引擎了解链接地址的内容" class="headerlink" title="title属性：鼠标滑过链接时显示该属性的内容。方便搜索引擎了解链接地址的内容"></a>title属性：鼠标滑过链接时显示该属性的内容。方便搜索引擎了解链接地址的内容</h3><pre><code class="html">&lt;a href=&quot;目标网址&quot; title=&quot;鼠标滑过显示的文本&quot;&gt;链接显示的文本&lt;/a&gt;</code></pre><h3 id="超链接伪类："><a href="#超链接伪类：" class="headerlink" title="超链接伪类："></a>超链接伪类：</h3><pre><code>a:link       访问前a:visited    访问后a:hover      鼠标悬停a:active     鼠标选中未释放</code></pre><h3 id="创建表格："><a href="#创建表格：" class="headerlink" title="创建表格："></a>创建表格：</h3><ol><li>table ：整个表格以 table 标记开始、 /table标记结束，table在加css样式前不会显示表格线。</br></li><li>tbody ：如果不加 thead tbody tfooter , table表格加载完后才显示。加上这些表格结构， tbody包含行的内容下载完优先显示，不必等待表格结束后在显示，同时如果表格很长，用tbody分段，可以一部分一部分地显示。（通俗理解table 可以按结构一块块的显示，不用等整个表格加载完后显示。）</br></li><li>tr：表格的一行，所以有几对tr 表格就有几行。</br></li><li>th：表格的头部的一个单元格，表格表头，文本默认粗体且居中显示。</br></li><li>td：表格的一个单元格，一行中包含几对 td 这行中就有几个单元格。</br></li><li>表格中列的个数，取决于一行中数据单元格的个数。</br></li><li>设置样式border-collapse:collapse;可以把双线边框线合并为一条线边框。<pre><code class="html">&lt;table border=&quot;边距宽度&quot;&gt;&lt;tr&gt;&lt;td rowspan=&quot;跨行数量&quot; colspan=&quot;跨列数量&quot; align=&quot;文本状态&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code></pre></li></ol><h3 id="表格可以添加标题和摘要标签进行优化。"><a href="#表格可以添加标题和摘要标签进行优化。" class="headerlink" title="表格可以添加标题和摘要标签进行优化。"></a>表格可以添加标题和摘要标签进行优化。</br></h3><p>(1)摘要：</p><pre><code class="html">&lt;table summary=&quot;表格简介文本&quot;&gt;</code></pre><p>摘要的内容不会在浏览器中显示。作用是增加表格的可读性(语义化)，使搜索引擎更好的读懂表格内容，还可以使屏幕阅读器更好的帮助特殊用户读取表格内容。</br><br>(2)标题： caption<br>描述表格内容，标题的显示位置：表格上方。<br>语法：</p><pre><code class="html">&lt;table summary=&quot;表格简介&quot;&gt;    &lt;caption&gt;标题&lt;/caption&gt;    &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code></pre><p>内联框架iframe</p><pre><code class="html">&lt;iframe&gt;&lt;/iframe&gt;</code></pre><p>相关属性 src=”引用页面地址” name=”框架标识名” frameborder=”边框”<br>scrolling=”是否出现滚动条” noresize=”noresize”更改页面大小<br>用a targer=””配合iframe name=””可实现窗口间的关联</p><p>表单</p><pre><code class="html">&lt;form method=&quot;提交方式&quot; action=&quot;提交地址&quot;&gt; </code></pre><p>如果是文件域要在表单中加 enctype=”multipart/form=data” 属性<br>隐藏域：type=”hidden”<br>只读：readonly=”readonly”<br>禁用：disabled=”disabled”</p><p>普通输入框</p><pre><code class="html">&lt;input type=&quot;text&quot; name=&quot;名称&quot; size=&quot;长度&quot; maxlength=&quot;最大长度&quot;/&gt;</code></pre><p>radio单选按钮</p><pre><code class="html">&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot; id=&quot;nan&quot;/&gt;&lt;label for=&quot;nan&quot;&gt;男&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot; id=&quot;nv&quot;/&gt;&lt;label for=&quot;nv&quot;&gt;女&lt;/label&gt;</code></pre><p>checkbox多选按钮</p><pre><code class="html">&lt;input type=&quot;checkbox&quot; name=&quot;&quot; value=&quot;1&quot;/&gt;</code></pre><p>下拉列表</p><pre><code class="html">&lt;select name=&quot;名称&quot;&gt;  &lt;optoin value=&quot;值&quot;&gt;1&lt;/option&gt;&lt;/select&gt;</code></pre><p>文本域textarea</p><pre><code class="html">&lt;textarea  rows=&quot;行数&quot; cols=&quot;列数&quot;&gt;文本&lt;/textarea&gt;</code></pre><p>透明度</p><pre><code>opacity:(范围0~1)  filter:aplha(opcitive=透明度&lt;(100)&gt;);</code></pre><p>Location 对象的方法：</p><pre><code>.assign() //加载新文档.reload() //刷新当前文档.replace() //用新文档替换当前文档</code></pre><p>在网页中显示代码，当代码为一行时可用 code 包裹，多行代码用 pre 。<br> pre：预格式化，它包围的文本会保留空格和换行符</p><p>下拉列表进行多选操作：在 select 标签中设置multiple=”multiple”属性，就可以实现多选功能，在windows 操作系统下，进行多选时按下Ctrl键同时进行单击（在 Mac下使用 Command +单击），可以选择多个选项。</p><p>通用选择器匹配所有标签 *{ }</p><p>浏览器根据选择器权值来使用权值最高的css样式<br>规则：<br>标签的权值为1，类选择器的权值为10，ID选择器的权值为100。</p><p>!important有最高权值<br>!important要写在分号的前面，但注意当网页制作者不设置css样式时，浏览器会按照自己的样式来显示网页。并且用户也可以在浏览器中设置自己习惯的样式，比如有的用户习惯把字号设置为大一些，使其查看网页的文本更加清楚。这时注意样式优先级为：浏览器默认的样式 &lt; 网页制作者样式 &lt; 用户自己设置的样式，但 !important优先级例外，权值高于用户自设置的样式。</p><h3 id="什么是“置换元素”？"><a href="#什么是“置换元素”？" class="headerlink" title="什么是“置换元素”？"></a>什么是“置换元素”？</h3><p>置换元素会根据标签属性来显示的元素。反之就是非置换元素了。<br>如img根据src属性来显示，input根据value属性显示，因此可知img和input是置换元素，同理textarea、 select也是置换元素。</br></p><p>段落排版：</p><pre><code>(1)letter-spacing：单个汉字间隔或单个字母间隔。(2)word-spacing：按单词来设置间隔。</code></pre><p>1、border-style 边框样式：dashed（虚线）| dotted（点线）| solid（实线）</br><br>2、border-color 边框颜色</br><br>3、border-width 边框宽度：thin | medium | thick。常用像素(px)。</br><br>4、当margin(或padding或border)的left和right的值相同，如：<br>margin:10px 20px 30px 20px;缩写：margin:10px 20px 30px;</p><h3 id="布局模型与盒模型都是-CSS概念。布局模型建立在盒模型基础上。"><a href="#布局模型与盒模型都是-CSS概念。布局模型建立在盒模型基础上。" class="headerlink" title="布局模型与盒模型都是 CSS概念。布局模型建立在盒模型基础上。"></a>布局模型与盒模型都是 CSS概念。布局模型建立在盒模型基础上。</h3><p>在网页中，元素有三种布局模型：<br>1、流动模型（Flow）<br>流动（Flow）是默认的网页布局模式。特征：块状元素都会在所处的包含元素内自上而下按顺序垂直延伸分布，因为在默认状态下，块状元素的宽度都为100%。实际上，块状元素都会以行的形式占据位置。<br>流动模型下，内联元素会在所处的包含元素内从左到右水平分布显示。</p><p>2、浮动模型 (Float)<br>任何元素默认是不能浮动的，可用CSS定义为浮动。</p><p>3、层模型（Layer）<br>让html元素在网页中精确定位，就像PhotoShop中的图层一样可以对每个图层能够精确定位操作。CSS定义了一组定位（positioning）属性来支持层布局模型。<br>层模型有三种形式：<br>(1)绝对定位(position: absolute)<br>将元素从文档流中拖出来，然后用left、right、top、bottom属性相对最靠近它的一个带有定位属性的父包含块进行绝对定位。如果不存在这样的父包含块，则相对于body元素即相对于浏览器窗口。</p><p>(2)相对定位(position: relative)<br>元素在正常文档流中的偏移位置。首先按static(float)方式生成一个元素(元素像层一样浮动了起来)，然后相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留。</p><p>(3)固定定位(position: fixed)<br>始终位于浏览器窗口内视图的设置位置，不受文档流动影响，<br>另外属性background-attachment:fixed;的作用也是设置背景图片固定。</p><p>relative与absolute组合：<br>1、参照定位的元素必须是相对定位元素的前辈元素。<br>2、参照定位的元素必须加入position:relative。<br>3、定位元素加入position:absolute，便可以使用top、bottom、left、right来进行偏移定位了。</p><h3 id="设置颜色的方法："><a href="#设置颜色的方法：" class="headerlink" title="设置颜色的方法："></a>设置颜色的方法：</h3><p>1、单词：p{color:red}<br>2、RGB<br>由 R(red)、G(green)、B(blue)三种颜色比例来配色。<br>p{color:rgb(133,45,200)}<br>每一项的值可以是 0<del>255 的整数，也可以是0%</del>100% 的百分数。如：<br>p{color:rgb(20%,33%,25%)}</p><p>3、十六进制颜色<br>其原理也是 RGB 设置，每一项的值由 0-255 变成了十六进制 00-ff。p{color:#00ffff;}</p><p>相对单位长度值：<br>1、px像素<br>像素指的是显示器上的小点(CSS规范中假设“90像素=1英寸”)。实际情况是浏览器和使用显示器的实际像素值有关。</p><p>2、em<br>(1)元素给定字体的 font-size 值，如果元素的 font-size 为 14px，那么 1em = 14px；如果font-size 为18px，那么 1em = 18px。<br>如 p{font-size:12px; text-indent:2em;}意思首行缩进 24px(即两个字体大小的距离)</p><p>(2)当 font-size 设置为 em时，计算标准以它父元素的 font-size 为基础。<br>如：</p><pre><code class="html">&lt;p&gt;以这个&lt;span&gt;例子&lt;/span&gt;为例&lt;/p&gt; p{font-size:14px}  span{font-size:0.8em;}这里 span 字体大小就为11.2px(14 * 0.8 = 11.2px)</code></pre><p>3、%百分比</p><pre><code class="html">p{font-size:12px; line-height:130%}</code></pre><p>设置行高(行间距)为字体的130%（12 * 1.3 = 15.6px）</p><p>块状元素没有设置宽度时怎么居中?<br> 1.加入 table 标签<br> 2.设置 display: inline方法：显示类型设为行内元素，进行不定宽元素的属性设置<br> 3.设置 position: relative 和 left:50%。利用相对定位，将元素从左偏移50%实现居中。</p><h3 id="隐性改变display类型："><a href="#隐性改变display类型：" class="headerlink" title="隐性改变display类型："></a>隐性改变display类型：</h3><ol><li>position : absolute;</li><li>float:left 或 float:right;<br>不论什么元素(display:none除外)，设置以上属性之一，该元素的display显示类型就会自动变为 以display:inline-block(行内块状元素)方式显示，此时可设置元素的 width 和 height，且默认宽度不占满父元素。<br>(如 a是行内元素，直接设置它的 width 无效，但设置 position:absolute 绝对定位后就可以设置宽度)</li></ol><p>文本格式化标签：</p><pre><code class="html">&lt;b&gt;      文本加粗&lt;strong&gt;文本加粗(加重语气)&lt;i&gt;      斜体字&lt;em&gt;      斜体(强调文字)&lt;big&gt;      字体放大&lt;small&gt;     字体缩小&lt;sub&gt;      定义下标字&lt;sup&gt;      定义上标字&lt;ins&gt;      插入字(字体下划线)&lt;del&gt;      字体删除线&quot;计算机输出&quot; 标签：&lt;code&gt;     定义计算机代码&lt;kbd&gt;     键盘输入&lt;samp&gt;     定义计算机代码样本&lt;var&gt;     定义变量&lt;pre&gt;     预格式化文本(会保留文本的多个空格)引文、引用、及标签定义：&lt;abbr&gt;        缩写&lt;address&gt;    地址联系信息&lt;bdo&gt;        文字方向(设置dir=&quot;rtl&quot;为从右到左显示)&lt;blockquote&gt;    长文本引用(不会自带双引号，但会两边自动缩进)&lt;q&gt;        短句引用语(自带双引号)&lt;cite&gt;        定义引用、引证&lt;dfn&gt;        定义一个定义项目。</code></pre><p>title=””属性规定关于元素的额外信息。标签中加上title属性可实现鼠标移过时出现提示文字，如</p><pre><code class="html">&lt;p title=&quot;提示&quot;&gt;</code></pre><p>base元素:<br>描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接:  </p><pre><code class="html">&lt;head&gt;         &lt;base href=&quot;//www.baidu.cn&quot; target=&quot;_blank&quot;/&gt;      &lt;/head&gt;</code></pre><p>提示：在HTML中，<code>&lt;base&gt;</code>标签没有结束标签。</p><p>HTML 颜色值RGB<br>由红(R)、绿(G)、蓝(B)组成。<br>每个颜色的最低值为0(十六进制为00)，最高值为255(十六进制为FF)。<br>十六进制值写法：#号后加3个或6个十六进制字符。<br>三位数表示法为：#RGB，转换为六位数表示为：#RRGGBB</p><p>常见的 URL Schemes<br>http    超文本传输协议    以http开头的普通网页不加密<br>https    安全超文本传输协议    https 加密所有信息交换<br>ftp        文件传输协议        把文件上传或下载到网站<br>file    本地计算机上的文件。</p><h2 id="HTML5多媒体标签"><a href="#HTML5多媒体标签" class="headerlink" title="HTML5多媒体标签"></a>HTML5多媒体标签</h2><pre><code class="html">&lt;embed&gt;    定义内嵌对象&lt;object&gt;定义内嵌对象&lt;param&gt;    定义对象的参数&lt;audio&gt;    定义声音内容&lt;video&gt;    定义视频或者影片&lt;source&gt;定义media元素的多媒体资源(&lt;video&gt;、&lt;audio&gt;)&lt;track&gt;    规定media元素的字幕文件或其他包含文本的文件 (&lt;video&gt;、&lt;audio&gt;)</code></pre><p>audio音频设置<br>1.解决方法：<br>下例使用两个不同的音频格式。HTML5  audio 元素会尝试以 mp3 或 ogg来播放音频。如果失败，代码将回退尝试 embed元素。</p><pre><code class="html">&lt;audio controls height=&quot;100&quot; width=&quot;100&quot;&gt;   &lt;source src=&quot;horse.mp3&quot; type=&quot;audio/mpeg&quot;&gt;   &lt;source src=&quot;horse.ogg&quot; type=&quot;audio/ogg&quot;&gt;   &lt;embed height=&quot;50&quot; width=&quot;100&quot; src=&quot;horse.mp3&quot;&gt;&lt;/audio&gt;</code></pre><p>2.雅虎播放器使用免费，提供一个小型的播放按钮。<br>（1）如果使用它，要把这段JS插入网页底部：</p><pre><code class="html"> &lt;script src=&quot;http://mediaplayer.yahoo.com/latest&quot;&gt;&lt;/script&gt;</code></pre><p>（2）然后把MP3文件链接到页面中，JS会自动为每首歌创建播放按钮如：</p><pre><code class="html"> &lt;a href=&quot;音频路径&quot;&gt;音乐1&lt;/a&gt; &lt;a href=&quot;horse.mp3&quot;&gt;音乐2&lt;/a&gt; &lt;script src=&quot;http://mediaplayer.yahoo.com/latest&quot;&gt;&lt;/script&gt;</code></pre><p>3.用超链接<br>以下代码指向 mp3 文件链接。如果用户点击该链接，浏览器会启动”辅助应用程序”来播放该文件：</p><pre><code class="html">&lt;a href=&quot;horse.mp3&quot;&gt;音乐1&lt;/a&gt;</code></pre><h3 id="video视频播放设置"><a href="#video视频播放设置" class="headerlink" title="video视频播放设置"></a>video视频播放设置</h3><h4 id="1-最好的解决方法"><a href="#1-最好的解决方法" class="headerlink" title="1.最好的解决方法"></a>1.最好的解决方法</h4><p>下例中使用了4种不同的视频格式。HTML 5 <code>&lt;video&gt;</code> 元素会尝试以 mp4、ogg、webm其中一种格式来播放视频。如果都失败，则回退到 <code>&lt;embed&gt;</code>元素。<br>HTML5的source + object + embed。</p><pre><code class="html">&lt;video width=&quot;320&quot; height=&quot;240&quot; controls&gt;   &lt;source src=&quot;movie.mp4&quot; type=&quot;video/mp4&quot;&gt;   &lt;source src=&quot;movie.ogg&quot; type=&quot;video/ogg&quot;&gt;   &lt;source src=&quot;movie.webm&quot; type=&quot;video/webm&quot;&gt;      &lt;object data=&quot;movie.mp4&quot; width=&quot;320&quot; height=&quot;240&quot;&gt;    &lt;embed src=&quot;movie.swf&quot; width=&quot;320&quot; height=&quot;240&quot;&gt;   &lt;/object&gt; &lt;/video&gt;</code></pre><h4 id="2-优酷解决方案"><a href="#2-优酷解决方案" class="headerlink" title="2.优酷解决方案"></a>2.优酷解决方案</h4><p>如果要在网页中播放视频，可把视频上传到优酷等视频网站，然后在你的网页中插入 HTML代码即可播放视频：</p><pre><code class="html"> &lt;embed  src=&quot;http://player.youku.com/player.php/sid/XMzI2NTc4NTMy/v.swf&quot;    width=&quot;480&quot; height=&quot;400&quot;     type=&quot;application/x-shockwave-flash&quot;&gt;&lt;/embed&gt;</code></pre><h4 id="3-使用超链接"><a href="#3-使用超链接" class="headerlink" title="3.使用超链接"></a>3.使用超链接</h4><p>如果网页包含指向媒体文件的超链接，大多数浏览器会使用”辅助应用程序”来播放文件。<br>以下代码指向 AVI文件的链接。如果用户点击该链接，浏览器会启动”辅助应用程序”如 Windows Media Player 来播放该 AVI 文件：</p><pre><code class="html">&lt;a href=&quot;https://www.xxx.com/html/intro.swf&quot;&gt;播放该视频&lt;/a&gt;</code></pre><h3 id="HTML中如何键入空格？"><a href="#HTML中如何键入空格？" class="headerlink" title="HTML中如何键入空格？"></a>HTML中如何键入空格？</h3><h4 id="1-用空格占位符-amp-nbsp"><a href="#1-用空格占位符-amp-nbsp" class="headerlink" title="1.用空格占位符 &amp;nbsp;"></a>1.用空格占位符 <code>&amp;nbsp;</code></h4><p>但&amp;nbsp有不间断的特性。即连续的&amp;nbsp会在同一行内显示。即使有多个&amp;nbsp，浏览器也不会把它们回车拆行。</p><h4 id="2-段落间距-lt-p-gt-、换行-lt-br-gt"><a href="#2-段落间距-lt-p-gt-、换行-lt-br-gt" class="headerlink" title="2.段落间距&lt;p&gt;、换行&lt;br/&gt;"></a>2.段落间距<code>&lt;p&gt;</code>、换行<code>&lt;br/&gt;</code></h4><h4 id="3-用JS动态给HTML添加空格："><a href="#3-用JS动态给HTML添加空格：" class="headerlink" title="3.用JS动态给HTML添加空格："></a>3.用JS动态给HTML添加空格：</h4><p>例为照顾CSS样式或照顾特殊效果的实现。如果你不单单想让div之间是null，而是想动态添加空格的话，这样(jquery):</p><pre><code>$(&quot;#id&quot;).innerHTML += &quot; &quot;;display: none; 元素不显示也不会占位visibility: hidden;  元素只是隐藏但仍然占位置visibility: collapse; 隐藏但不占空间，类似display:none;</code></pre><p>clip 剪辑一个绝对定位的元素。<br>clip : rect(top, right, bottom, left);</p><h3 id="CSS-伪类："><a href="#CSS-伪类：" class="headerlink" title="CSS 伪类："></a>CSS 伪类：</h3><h4 id="1-Anchor伪类-伪类如-link冒号和伪类名之间不能有空格"><a href="#1-Anchor伪类-伪类如-link冒号和伪类名之间不能有空格" class="headerlink" title="1.Anchor伪类 (伪类如:link冒号和伪类名之间不能有空格)"></a>1.Anchor伪类 (伪类如:link冒号和伪类名之间不能有空格)</h4><pre><code class="html">在支持 CSS 的浏览器中，链接的不同状态可用不同的方式显示：a:link {color:#FF0000;}   /* 未访问的链接 */ a:visited {color:#00FF00;} /* 已访问的链接 */ a:hover {color:#FF00FF;}  /* 鼠标划过链接 */ a:active {color:#0000FF;}  /* 已选中的链接 */</code></pre><h4 id="2-CSS类和伪类配合使用："><a href="#2-CSS类和伪类配合使用：" class="headerlink" title="2.CSS类和伪类配合使用："></a>2.CSS类和伪类配合使用：</h4><pre><code class="html">p : first-child{ }   匹配父级中第一个&lt;p&gt;子元素p &gt; i:first-child{ } 匹配所有&lt;p&gt;元素的第一个 &lt;i&gt; 子元素p:first-child i{ }  匹配第一个&lt;p&gt;元素中的所有 &lt;i&gt; 元素White-space属性：设置如何处理元素内的空白。normal     默认。空白会被浏览器忽略。pre     空白会被浏览器保留。其行为方式类似 &lt;pre&gt;标签。nowrap     文本不会换行，文本在同一行上继续，直到遇到&lt;br/&gt;为止。pre-wrap     保留空白符序列，但是正常地进行换行。pre-line     合并空白符序列，但是保留换行符。inherit     从父元素继承 white-space 属性的值。</code></pre><h4 id="浏览器兼容前缀："><a href="#浏览器兼容前缀：" class="headerlink" title="浏览器兼容前缀："></a>浏览器兼容前缀：</h4><pre><code>-moz-      火狐等使用 Mozilla内核的浏览器-webkit-   谷歌、Safari等使用 Webkit内核的浏览器-o-        Opera浏览器，使用Blink内核-ms-       IE，使用 Trident内核viewport 是用户网页的可视区域。</code></pre><p>注：本文非原创，如有侵权。请联系本人删除。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学生通讯录管理系统</title>
      <link href="/2019/12/14/%E9%80%9A%E8%AE%AF%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/12/14/%E9%80%9A%E8%AE%AF%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="设计要求"><a href="#设计要求" class="headerlink" title="设计要求"></a>设计要求</h4><h6 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h6><p>&nbsp;        <strong>纸质的通讯录系统已经不能满足大家的要求，容易丢失、查找困难等问题是纸质通讯录所不能克服的缺点。“学生通讯管理系统”是为了帮助老师、同学，或者其他一些需要使用通讯录的人员进行管理和分析的一种应用程序。</strong></p><a id="more"></a><h6 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h6><ol><li>输入数据建立通讯录 </li><li>查询通讯录系统中满足要求的信息 </li><li>插入新的通讯录信息 </li><li>删除不需要的通讯录信息</li><li>查看所有通讯录信息</li></ol><h4 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h4><h6 id="主界面设计"><a href="#主界面设计" class="headerlink" title="主界面设计"></a>主界面设计</h6><p>&nbsp;       <strong>为了实现学生通讯录管理系统各功能的管理，设计一个含有多个菜单项的主控菜单子程序以链接系统的各项子功能，方便用户使用本系统。本系统主控菜单运行界面如图所示。</strong><br><img src="https://i.loli.net/2019/12/14/Zp3nYPFJG9eXrmM.png" alt="主界面.png"></p><h6 id="存储结构设计"><a href="#存储结构设计" class="headerlink" title="存储结构设计"></a>存储结构设计</h6><p>&nbsp;        本系统主要采用链表结构类型来表示存储在“学生通讯录管理系统”中的信息。其中，链表结点由四个分量构成；通讯录成员学号、通讯录成员姓名、通讯录成员电话号码、指向该结构体的指针。</p><h6 id="系统功能设计"><a href="#系统功能设计" class="headerlink" title="系统功能设计"></a>系统功能设计</h6><p>本系统设置了5个子功能菜单，5个子功能的设计描述如下。</p><ol><li>建立通讯录系统。可以一次输入多个成员通讯录的信息，建立通讯录。<br><img src="https://i.loli.net/2019/12/14/Zp3nYPFJG9eXrmM.png" alt="主界面.png"></li><li>插入通讯记录。每次可以插入一个成员通讯录的信息。如果要连续插入多个成员通讯录信息必须多次选择该功能。<br><img src="https://i.loli.net/2019/12/14/ieLD2nGHdUYXoNz.png" alt="添加1.png"></li><li>查询通讯记录。可以按两种方式查询所需要的通讯录成员记录，一是按学号查询，二是按姓名查询。<br><img src="https://i.loli.net/2019/12/14/mn7GBDaHbpuMfyz.png" alt="查询.png"></li><li>删除通讯记录。可以对通讯录中不再需要的信息进行删除。<br><img src="https://i.loli.net/2019/12/14/QNiYcVsWhwX23eB.png" alt="删除.png"></li><li>显示通讯录系统。可以查看通讯录中所有的通讯录成员记录。<br><img src="https://i.loli.net/2019/12/14/F386zJqGDMyEOCY.png" alt="显示.png"></li></ol><h4 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h4><pre><code class="C++"># include &lt;stdio.h&gt;# include &lt;stdlib.h&gt;# include &lt;string.h&gt;typedef struct student //定义学生结点{    char name[20]; //姓名    int num; //学号     char phone[20]; //电话    struct student *next;}stud;void Menu() //菜单{    printf(&quot;\n\n\n&quot;);    printf(&quot;***********************班级通讯录管理系统***********************\n\n&quot;);    printf(&quot;                   1.建立通讯录                                 \n\n&quot;);    printf(&quot;                   2.添加通讯录                                 \n\n&quot;);    printf(&quot;                   3.删除通讯录                                 \n\n&quot;);      printf(&quot;                   4.查询通讯录                                 \n\n&quot;);    printf(&quot;                   5.显示通讯录                                 \n\n&quot;);    printf(&quot;                   0.退出系统                                   \n\n&quot;);    printf(&quot;****************************************************************\n&quot;);}void Init(stud *H) //初始化{    H-&gt;next=NULL;}void Input(stud *H) //输入{    int n;    stud *p, *q;    p=H;    while(p-&gt;next)    {        p=p-&gt;next; //p指向链表的最后一个结点    }    while(true)    {    q=(stud *)malloc(sizeof(stud)); //申请空间    q-&gt;next = NULL;    printf(&quot;请输入学生信息：\n&quot;);    printf(&quot;姓名：&quot;); scanf(&quot;%s&quot;, &amp;q-&gt;name); printf(&quot;\n&quot;);    printf(&quot;学号：&quot;); scanf(&quot;%d&quot;, &amp;q-&gt;num); printf(&quot;\n&quot;);    printf(&quot;电话：&quot;); scanf(&quot;%s&quot;, &amp;q-&gt;phone); printf(&quot;\n&quot;);    p-&gt;next=q;    p=q;//    system(&quot;cls&quot;); //清屏    printf(&quot;是否接着输入：1(继续)/0(结束)\n&quot;);    scanf(&quot;%d&quot;, &amp;n);    if(n==0) break;    }}void Output(stud *H) //显示输出{//    system(&quot;cls&quot;);    stud *p;    p = H-&gt;next;    if(!p)     {        printf(&quot;\n没有学生记录!!!\n&quot;);        return ;    }    printf(&quot;姓名           学号            电话\n&quot;);    while(p) //输出学生记录    {        printf(&quot;%s           %d              %s\n&quot;, p-&gt;name, p-&gt;num,p-&gt;phone);        p=p-&gt;next;    }}void Findm(stud *H) //查询姓名 {//    system(&quot;cls&quot;);    char str[20];     bool f=false;    stud *p;    p=H-&gt;next;    printf(&quot;请输入姓名：\n&quot;);    scanf(&quot;%s&quot;, str);    if(!p)    {        printf(&quot;没有符合条件的学生记录！\n&quot;);        return ;    }    printf(&quot;姓名         学号        电话\n&quot;);    while(p)    {        if(strcmp(str, p-&gt;name)==0) //找到了一条符合条件的记录        {            f=true;            printf(&quot;%s          %d          %s\n&quot;,                     p-&gt;name, p-&gt;num,p-&gt;phone);        }        p=p-&gt;next;    }    if(!f)    {        printf(&quot;没有符合条件的学生记录！\n&quot;);    }}void Findh(stud *H) //查询学号 {//    system(&quot;cls&quot;);    char str;     bool f=false;    stud *p;    p=H-&gt;next;    printf(&quot;请输入学号：\n&quot;);    scanf(&quot;%d&quot;, str);    if(!p)    {        printf(&quot;没有符合条件的学生记录！\n&quot;);        return ;    }    printf(&quot;姓名         学号        电话\n&quot;);    while(p)    {        if(str==p-&gt;num) //找到了一条符合条件的记录        {            f=true;            printf(&quot;%s          %d          %s\n&quot;,                     p-&gt;name, p-&gt;num, p-&gt;phone);        }        p=p-&gt;next;    }    if(!f)    {        printf(&quot;没有符合条件的学生记录！\n&quot;);    }}void Find(stud *H) //查询 {    int select;//    system(&quot;cls&quot;);    printf(&quot;*************************查询**************************************\n\n&quot;);    printf(&quot;              1.按姓名                                             \n\n&quot;);    printf(&quot;              2.按学号                                             \n\n&quot;);    printf(&quot;              0.退出                                               \n\n&quot;);    printf(&quot;*******************************************************************\n\n&quot;);    while(true)    {        printf(&quot;请选择（0-2）&quot;);        scanf(&quot;%d&quot;,&amp;select);         if(select&gt;=0&amp;&amp;select&lt;3) break;    }    switch(select)    {//        case 0: return 0; break;        case 1: Findm(H); break;        case 2: Findh(H); break;    }}void Del(stud *H)//删除学生信息{    char str[20];    printf(&quot;\n请输入要删除记录的姓名：\n&quot;);    scanf(&quot;%s&quot;, str);    stud *p, *q;    p=H;    q=H-&gt;next;    bool flag=false;    while(q)    {        if(strcmp(q-&gt;name, str)==0)        {            flag=true;            p-&gt;next=q-&gt;next;            q=p-&gt;next;break;        }        p=q;        q=q-&gt;next;    }    printf(&quot;\n删除成功！！\n&quot;);    printf(&quot;\n\n删除成功后的学生通讯信息：\n&quot;);    Output(H); }void Add(stud *H) //添加学生信息{    int n;    stud *p, *q;    p=H;    while(p-&gt;next) //p指向链表的最后一个结点    {        p=p-&gt;next;    }    while(true)    {    q=(stud *)malloc(sizeof(stud)); //申请空间    q-&gt;next = NULL;    printf(&quot;\n请输入添加学生的信息：\n&quot;);    printf(&quot;姓名：&quot;); scanf(&quot;%s&quot;, &amp;q-&gt;name); printf(&quot;\n&quot;);    printf(&quot;学号：&quot;); scanf(&quot;%d&quot;, &amp;q-&gt;num); printf(&quot;\n&quot;);    printf(&quot;电话：&quot;); scanf(&quot;%s&quot;, &amp;q-&gt;phone); printf(&quot;\n&quot;);    p-&gt;next=q;    p=q;//    system(&quot;cls&quot;); //清屏    printf(&quot;是否继续添加：1(继续)/0(结束)\n&quot;);    scanf(&quot;%d&quot;, &amp;n);    if(n==0) break;    }    printf(&quot;\n添加成功！\n&quot;);    printf(&quot;\n\n添加成功后的学生通讯信息：\n&quot;);    Output(H); }int main(){    stud *H;    H = (stud *)malloc(sizeof(stud)); //注意，申请空间的时候最好是在主函数中申请    Init(H); //初始化，申请一个头结点    bool flag;    int select, m;    while(true)    {    Menu();    printf(&quot;请输入(0-5):\n&quot;);    flag=true;    while(flag)    {        flag=false;        scanf(&quot;%d&quot;, &amp;select);        if(select&lt;0 || select&gt;5)         {            printf(&quot;输入不正确，请重新输入(0-5):\n&quot;);            flag=true;        }    }    switch(select)    {        case 0: return 0; break;        case 1: Input(H); break;        case 2: Add(H); break;        case 3: Del(H); break;        case 4: Find(H); break;        case 5: Output(H); break;    }    printf(&quot;\n请选择:1(继续)/0(结束)\n&quot;);    scanf(&quot;%d&quot;, &amp;m);    if(m==0)  return 0;//    system(&quot;cls&quot;); //清屏    }    return 0;}</code></pre><p>微信公众号<br><img src="https://i.loli.net/2019/12/14/grvWnuzq9eaV7OS.jpg" alt="微信公众号二维码.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 学生通讯录管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html 初学笔记</title>
      <link href="/2019/12/05/%E8%AE%A4%E8%AF%86HTML/"/>
      <url>/2019/12/05/%E8%AE%A4%E8%AF%86HTML/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="认识Html"><a href="#认识Html" class="headerlink" title="认识Html"></a>认识Html</h1><p> <strong>超文本编辑语言（Hyper Text Markup Language）</strong>是Internet上用来编写网页的主要语言。html是一种描述性标记语言，用来描述页面内容的显示方式；以HTML语言为主编写的HTML是一种纯文本文件，以 .html或.htm为后缀。</p><a id="more"></a><h3 id="【语法】"><a href="#【语法】" class="headerlink" title="【语法】"></a>【语法】</h3><pre><code>            &lt;标签&gt;                    内容            &lt;/标签&gt;</code></pre><p>其中：</p><ul><li>标签通常都是成对出现，有开始的&lt;标签&gt;，有对应的结束的&lt;/标签&gt;。</li><li>内容是一些纯文本文字或标签。</li><li>HTML元素指的是从开始标签到结束标签的所有代码。</li></ul><h3 id="【title元素】"><a href="#【title元素】" class="headerlink" title="【title元素】"></a>【title元素】</h3><pre><code>            &lt;title&gt;                    一个简单的页面            &lt;/title&gt;</code></pre><h3 id="HTML文档具体结构："><a href="#HTML文档具体结构：" class="headerlink" title="HTML文档具体结构："></a>HTML文档具体结构：</h3><p><img src="https://i.loli.net/2019/10/09/nwhKC2R6D7W8aLj.png" alt="选区_010.png"></p><p>   在HTML文件的第一行中，使用&lt;!DOCTYPE&gt;标签来<strong>指定文档类型</strong>定义，<strong>&lt;!DOCTYPE&gt;标签需放在所有文档标签之前</strong>，用于说明文档使用的HTML或XHTML的特定版本，并告诉浏览器后续内容应依照什么方式来进行解析。</p><p>HTML文档结构是由<html><head><body>三大元素组成。</p><ul><li>html元素：HTML文档是以<html>标签开始，以</html>标签结束。文档的所有内容都需要放在这两个标签之间。</li><li>head元素：<strong>页面头部信息</strong>用于像浏览器提供整个页面的基本信息，但不包括页面的主体内容。<strong>头部信息主要包括页面的标题、元信息、CSS样式、JavaScript脚本等元素</strong>。</li><li>body元素：<strong>网页的正文，用户在浏览器主体窗口中看到的信息</strong>，包括图片、表格、段落、视频等内容，且须位于<body>标签之内。</li></ul><h3 id="【实例代码】"><a href="#【实例代码】" class="headerlink" title="【实例代码】"></a>【实例代码】</h3><pre><code class="html">                &lt;!DOCTYPE html&gt;                    &lt;html&gt;                          &lt;head&gt;                             &lt;title&gt;                                  第一个网页                            &lt;/title&gt;                         &lt;/head&gt;                            &lt;body&gt;                                    hello world !                            &lt;/body&gt;                    &lt;/html&gt;</code></pre><h3 id="【实例效果】"><a href="#【实例效果】" class="headerlink" title="【实例效果】"></a>【实例效果】</h3><p><img src="https://i.loli.net/2019/10/09/mfrcX1DbetdP4Ll.png" alt="选区_011.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++用类写友元</title>
      <link href="/2019/06/13/filename-C++/"/>
      <url>/2019/06/13/filename-C++/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><strong>声明Book与Ruler两个类，二者都有weight属性，定义二者的一个友元函数totalWeight（），计算二者的重量和。</strong></p><a id="more"></a><pre><code class="C++">    #include&lt;iostream&gt;    using namespace std;    class Ruler;    class Book    {        private:            int weight1;            friend void totalWeight(Book &amp;b,Ruler &amp;r);        public:            void init();    };    void Book::init()    {        cout&lt;&lt;&quot;请输入书的重量：&quot;&lt;&lt;endl;        cin&gt;&gt;weight1;    }    class Ruler    {        private:            int weight2;            friend void totalWeight(Book &amp;b,Ruler &amp;r);        public:            void init();    };    void Ruler::init()    {        cout&lt;&lt;&quot;请输入尺子的重量：&quot;&lt;&lt;endl;        cin&gt;&gt;weight2;    }    void totalWeight(Book &amp;b,Ruler &amp;r)    {        cout&lt;&lt;&quot;二者的重量和为：&quot;&lt;&lt;b.weight1+r.weight2&lt;&lt;endl;     }     int main()    {        Book book;        Ruler ruler;        book.init();        ruler.init();        totalWeight(book,ruler);        return 0;    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 友元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言写友好函数</title>
      <link href="/2019/05/16/filename/"/>
      <url>/2019/05/16/filename/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><strong>写函数，以两个正整数为参数，如果该两数是友好的，返回t，否则返回f。如果这两个每个的约数和（除了本身以外）等于对方整数，则称这对数是友好的。（例如：1184的约数和有：1+2+4+8+16+32+37+74+148+296+592=1210；1210的约数和有：1+2+5+10+11+22+55+110+121+242+605=1184。这对数是友好的。）</strong></p><a id="more"></a><pre><code class="C++">#include &lt;stdio.h&gt;int facsum(int n){    int x=0;    for(int i=1;i&lt;n;i++)    if (n%i==0)        x+=i;    return x;}int main(){   int m,n;   printf(&quot;请输入两个整数:\n&quot;);   scanf(&quot;%d %d&quot;,&amp;m,&amp;n);   if (facsum(n)==m&amp;&amp;facsum(m)==n)    {        printf(&quot;%d和%d是友元\n&quot;,m,n);    }    else    {        printf(&quot;%d和%d不是友元\n&quot;,m,n);     }        return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
