<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学生通讯录管理系统</title>
      <link href="/2019/12/14/%E9%80%9A%E8%AE%AF%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/12/14/%E9%80%9A%E8%AE%AF%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h4 id="设计要求"><a href="#设计要求" class="headerlink" title="设计要求"></a>设计要求</h4><h6 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h6><p>&nbsp;        <strong>纸质的通讯录系统已经不能满足大家的要求，容易丢失、查找困难等问题是纸质通讯录所不能克服的缺点。“学生通讯管理系统”是为了帮助老师、同学，或者其他一些需要使用通讯录的人员进行管理和分析的一种应用程序。</strong></p><a id="more"></a><h6 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h6><ol><li>输入数据建立通讯录 </li><li>查询通讯录系统中满足要求的信息 </li><li>插入新的通讯录信息 </li><li>删除不需要的通讯录信息</li><li>查看所有通讯录信息</li></ol><h4 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h4><h6 id="主界面设计"><a href="#主界面设计" class="headerlink" title="主界面设计"></a>主界面设计</h6><p>&nbsp;       <strong>为了实现学生通讯录管理系统各功能的管理，设计一个含有多个菜单项的主控菜单子程序以链接系统的各项子功能，方便用户使用本系统。本系统主控菜单运行界面如图所示。</strong><br><img src="https://i.loli.net/2019/12/14/Zp3nYPFJG9eXrmM.png" alt="主界面.png"></p><h6 id="存储结构设计"><a href="#存储结构设计" class="headerlink" title="存储结构设计"></a>存储结构设计</h6><p>&nbsp;        本系统主要采用链表结构类型来表示存储在“学生通讯录管理系统”中的信息。其中，链表结点由四个分量构成；通讯录成员学号、通讯录成员姓名、通讯录成员电话号码、指向该结构体的指针。</p><h6 id="系统功能设计"><a href="#系统功能设计" class="headerlink" title="系统功能设计"></a>系统功能设计</h6><p>本系统设置了5个子功能菜单，5个子功能的设计描述如下。</p><ol><li>建立通讯录系统。可以一次输入多个成员通讯录的信息，建立通讯录。<br><img src="https://i.loli.net/2019/12/14/Zp3nYPFJG9eXrmM.png" alt="主界面.png"></li><li>插入通讯记录。每次可以插入一个成员通讯录的信息。如果要连续插入多个成员通讯录信息必须多次选择该功能。<br><img src="https://i.loli.net/2019/12/14/ieLD2nGHdUYXoNz.png" alt="添加1.png"></li><li>查询通讯记录。可以按两种方式查询所需要的通讯录成员记录，一是按学号查询，二是按姓名查询。<br><img src="https://i.loli.net/2019/12/14/mn7GBDaHbpuMfyz.png" alt="查询.png"></li><li>删除通讯记录。可以对通讯录中不再需要的信息进行删除。<br><img src="https://i.loli.net/2019/12/14/QNiYcVsWhwX23eB.png" alt="删除.png"></li><li>显示通讯录系统。可以查看通讯录中所有的通讯录成员记录。<br><img src="https://i.loli.net/2019/12/14/F386zJqGDMyEOCY.png" alt="显示.png"></li></ol><h4 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h4><pre><code class="C"># include &lt;stdio.h&gt;# include &lt;stdlib.h&gt;# include &lt;string.h&gt;typedef struct student //定义学生结点{    char name[20]; //姓名    int num; //学号     char phone[20]; //电话    struct student *next;}stud;void Menu() //菜单{    printf(&quot;\n\n\n&quot;);    printf(&quot;***********************班级通讯录管理系统***********************\n\n&quot;);    printf(&quot;                   1.建立通讯录                                 \n\n&quot;);    printf(&quot;                   2.添加通讯录                                 \n\n&quot;);    printf(&quot;                   3.删除通讯录                                 \n\n&quot;);      printf(&quot;                   4.查询通讯录                                 \n\n&quot;);    printf(&quot;                   5.显示通讯录                                 \n\n&quot;);    printf(&quot;                   0.退出系统                                   \n\n&quot;);    printf(&quot;****************************************************************\n&quot;);}void Init(stud *H) //初始化{    H-&gt;next=NULL;}void Input(stud *H) //输入{    int n;    stud *p, *q;    p=H;    while(p-&gt;next)    {        p=p-&gt;next; //p指向链表的最后一个结点    }    while(true)    {    q=(stud *)malloc(sizeof(stud)); //申请空间    q-&gt;next = NULL;    printf(&quot;请输入学生信息：\n&quot;);    printf(&quot;姓名：&quot;); scanf(&quot;%s&quot;, &amp;q-&gt;name); printf(&quot;\n&quot;);    printf(&quot;学号：&quot;); scanf(&quot;%d&quot;, &amp;q-&gt;num); printf(&quot;\n&quot;);    printf(&quot;电话：&quot;); scanf(&quot;%s&quot;, &amp;q-&gt;phone); printf(&quot;\n&quot;);    p-&gt;next=q;    p=q;//    system(&quot;cls&quot;); //清屏    printf(&quot;是否接着输入：1(继续)/0(结束)\n&quot;);    scanf(&quot;%d&quot;, &amp;n);    if(n==0) break;    }}void Output(stud *H) //显示输出{//    system(&quot;cls&quot;);    stud *p;    p = H-&gt;next;    if(!p)     {        printf(&quot;\n没有学生记录!!!\n&quot;);        return ;    }    printf(&quot;姓名           学号            电话\n&quot;);    while(p) //输出学生记录    {        printf(&quot;%s           %d              %s\n&quot;, p-&gt;name, p-&gt;num,p-&gt;phone);        p=p-&gt;next;    }}void Findm(stud *H) //查询姓名 {//    system(&quot;cls&quot;);    char str[20];     bool f=false;    stud *p;    p=H-&gt;next;    printf(&quot;请输入姓名：\n&quot;);    scanf(&quot;%s&quot;, str);    if(!p)    {        printf(&quot;没有符合条件的学生记录！\n&quot;);        return ;    }    printf(&quot;姓名         学号        电话\n&quot;);    while(p)    {        if(strcmp(str, p-&gt;name)==0) //找到了一条符合条件的记录        {            f=true;            printf(&quot;%s          %d          %s\n&quot;,                     p-&gt;name, p-&gt;num,p-&gt;phone);        }        p=p-&gt;next;    }    if(!f)    {        printf(&quot;没有符合条件的学生记录！\n&quot;);    }}void Findh(stud *H) //查询学号 {//    system(&quot;cls&quot;);    char str;     bool f=false;    stud *p;    p=H-&gt;next;    printf(&quot;请输入学号：\n&quot;);    scanf(&quot;%d&quot;, str);    if(!p)    {        printf(&quot;没有符合条件的学生记录！\n&quot;);        return ;    }    printf(&quot;姓名         学号        电话\n&quot;);    while(p)    {        if(str==p-&gt;num) //找到了一条符合条件的记录        {            f=true;            printf(&quot;%s          %d          %s\n&quot;,                     p-&gt;name, p-&gt;num, p-&gt;phone);        }        p=p-&gt;next;    }    if(!f)    {        printf(&quot;没有符合条件的学生记录！\n&quot;);    }}void Find(stud *H) //查询 {    int select;//    system(&quot;cls&quot;);    printf(&quot;*************************查询**************************************\n\n&quot;);    printf(&quot;              1.按姓名                                             \n\n&quot;);    printf(&quot;              2.按学号                                             \n\n&quot;);    printf(&quot;              0.退出                                               \n\n&quot;);    printf(&quot;*******************************************************************\n\n&quot;);    while(true)    {        printf(&quot;请选择（0-2）&quot;);        scanf(&quot;%d&quot;,&amp;select);         if(select&gt;=0&amp;&amp;select&lt;3) break;    }    switch(select)    {//        case 0: return 0; break;        case 1: Findm(H); break;        case 2: Findh(H); break;    }}void Del(stud *H)//删除学生信息{    char str[20];    printf(&quot;\n请输入要删除记录的姓名：\n&quot;);    scanf(&quot;%s&quot;, str);    stud *p, *q;    p=H;    q=H-&gt;next;    bool flag=false;    while(q)    {        if(strcmp(q-&gt;name, str)==0)        {            flag=true;            p-&gt;next=q-&gt;next;            q=p-&gt;next;break;        }        p=q;        q=q-&gt;next;    }    printf(&quot;\n删除成功！！\n&quot;);    printf(&quot;\n\n删除成功后的学生通讯信息：\n&quot;);    Output(H); }void Add(stud *H) //添加学生信息{    int n;    stud *p, *q;    p=H;    while(p-&gt;next) //p指向链表的最后一个结点    {        p=p-&gt;next;    }    while(true)    {    q=(stud *)malloc(sizeof(stud)); //申请空间    q-&gt;next = NULL;    printf(&quot;\n请输入添加学生的信息：\n&quot;);    printf(&quot;姓名：&quot;); scanf(&quot;%s&quot;, &amp;q-&gt;name); printf(&quot;\n&quot;);    printf(&quot;学号：&quot;); scanf(&quot;%d&quot;, &amp;q-&gt;num); printf(&quot;\n&quot;);    printf(&quot;电话：&quot;); scanf(&quot;%s&quot;, &amp;q-&gt;phone); printf(&quot;\n&quot;);    p-&gt;next=q;    p=q;//    system(&quot;cls&quot;); //清屏    printf(&quot;是否继续添加：1(继续)/0(结束)\n&quot;);    scanf(&quot;%d&quot;, &amp;n);    if(n==0) break;    }    printf(&quot;\n添加成功！\n&quot;);    printf(&quot;\n\n添加成功后的学生通讯信息：\n&quot;);    Output(H); }int main(){    stud *H;    H = (stud *)malloc(sizeof(stud)); //注意，申请空间的时候最好是在主函数中申请    Init(H); //初始化，申请一个头结点    bool flag;    int select, m;    while(true)    {    Menu();    printf(&quot;请输入(0-5):\n&quot;);    flag=true;    while(flag)    {        flag=false;        scanf(&quot;%d&quot;, &amp;select);        if(select&lt;0 || select&gt;5)         {            printf(&quot;输入不正确，请重新输入(0-5):\n&quot;);            flag=true;        }    }    switch(select)    {        case 0: return 0; break;        case 1: Input(H); break;        case 2: Add(H); break;        case 3: Del(H); break;        case 4: Find(H); break;        case 5: Output(H); break;    }    printf(&quot;\n请选择:1(继续)/0(结束)\n&quot;);    scanf(&quot;%d&quot;, &amp;m);    if(m==0)  return 0;//    system(&quot;cls&quot;); //清屏    }    return 0;}</code></pre><p>微信公众号<br><img src="https://i.loli.net/2019/12/14/grvWnuzq9eaV7OS.jpg" alt="微信公众号二维码.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 学生通讯录管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html 初学笔记</title>
      <link href="/2019/12/05/%E8%AE%A4%E8%AF%86HTML/"/>
      <url>/2019/12/05/%E8%AE%A4%E8%AF%86HTML/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="认识Html"><a href="#认识Html" class="headerlink" title="认识Html"></a>认识Html</h1><p> <strong>超文本编辑语言（Hyper Text Markup Language）</strong>是Internet上用来编写网页的主要语言。html是一种描述性标记语言，用来描述页面内容的显示方式；以HTML语言为主编写的HTML是一种纯文本文件，以 .html或.htm为后缀。</p><a id="more"></a><h3 id="【语法】"><a href="#【语法】" class="headerlink" title="【语法】"></a>【语法】</h3><pre><code>            &lt;标签&gt;                    内容            &lt;/标签&gt;</code></pre><p>其中：</p><ul><li>标签通常都是成对出现，有开始的&lt;标签&gt;，有对应的结束的&lt;/标签&gt;。</li><li>内容是一些纯文本文字或标签。</li><li>HTML元素指的是从开始标签到结束标签的所有代码。</li></ul><h3 id="【title元素】"><a href="#【title元素】" class="headerlink" title="【title元素】"></a>【title元素】</h3><pre><code>            &lt;title&gt;                    一个简单的页面            &lt;/title&gt;</code></pre><h3 id="HTML文档具体结构："><a href="#HTML文档具体结构：" class="headerlink" title="HTML文档具体结构："></a>HTML文档具体结构：</h3><p><img src="https://i.loli.net/2019/10/09/nwhKC2R6D7W8aLj.png" alt="选区_010.png"></p><p>   在HTML文件的第一行中，使用&lt;!DOCTYPE&gt;标签来<strong>指定文档类型</strong>定义，<strong>&lt;!DOCTYPE&gt;标签需放在所有文档标签之前</strong>，用于说明文档使用的HTML或XHTML的特定版本，并告诉浏览器后续内容应依照什么方式来进行解析。</p><p>HTML文档结构是由<html><head><body>三大元素组成。</p><ul><li>html元素：HTML文档是以<html>标签开始，以</html>标签结束。文档的所有内容都需要放在这两个标签之间。</li><li>head元素：<strong>页面头部信息</strong>用于像浏览器提供整个页面的基本信息，但不包括页面的主体内容。<strong>头部信息主要包括页面的标题、元信息、CSS样式、JavaScript脚本等元素</strong>。</li><li>body元素：<strong>网页的正文，用户在浏览器主体窗口中看到的信息</strong>，包括图片、表格、段落、视频等内容，且须位于<body>标签之内。</li></ul><h3 id="【实例代码】"><a href="#【实例代码】" class="headerlink" title="【实例代码】"></a>【实例代码】</h3><pre><code>            &lt;!DOCTYPE html&gt;                &lt;html&gt;                      &lt;head&gt;                         &lt;title&gt;                              第一个网页                        &lt;/title&gt;                     &lt;/head&gt;                        &lt;body&gt;                                hello world !                        &lt;/body&gt;                &lt;/html&gt;</code></pre><h3 id="【实例效果】"><a href="#【实例效果】" class="headerlink" title="【实例效果】"></a>【实例效果】</h3><p><img src="https://i.loli.net/2019/10/09/mfrcX1DbetdP4Ll.png" alt="选区_011.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++用类写友元</title>
      <link href="/2019/06/13/filename-C++/"/>
      <url>/2019/06/13/filename-C++/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><strong>声明Book与Ruler两个类，二者都有weight属性，定义二者的一个友元函数totalWeight（），计算二者的重量和。</strong></p><a id="more"></a><pre><code>#include&lt;iostream&gt;using namespace std;class Ruler;class Book{    private:        int weight1;        friend void totalWeight(Book &amp;b,Ruler &amp;r);    public:        void init();};void Book::init(){    cout&lt;&lt;&quot;请输入书的重量：&quot;&lt;&lt;endl;    cin&gt;&gt;weight1;}class Ruler{    private:        int weight2;        friend void totalWeight(Book &amp;b,Ruler &amp;r);    public:        void init();};void Ruler::init(){    cout&lt;&lt;&quot;请输入尺子的重量：&quot;&lt;&lt;endl;    cin&gt;&gt;weight2;}void totalWeight(Book &amp;b,Ruler &amp;r){    cout&lt;&lt;&quot;二者的重量和为：&quot;&lt;&lt;b.weight1+r.weight2&lt;&lt;endl;  } int main(){    Book book;    Ruler ruler;    book.init();    ruler.init();    totalWeight(book,ruler);    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 友元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言写友好函数</title>
      <link href="/2019/05/16/filename/"/>
      <url>/2019/05/16/filename/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p><strong>写函数，以两个正整数为参数，如果该两数是友好的，返回t，否则返回f。如果这两个每个的约数和（除了本身以外）等于对方整数，则称这对数是友好的。（例如：1184的约数和有：1+2+4+8+16+32+37+74+148+296+592=1210；1210的约数和有：1+2+5+10+11+22+55+110+121+242+605=1184。这对数是友好的。）</strong></p><a id="more"></a><pre><code class="*C">#include &lt;stdio.h&gt;int facsum(int n){    int x=0;    for(int i=1;i&lt;n;i++)    if (n%i==0)        x+=i;    return x;}int main(){   int m,n;   printf(&quot;请输入两个整数:\n&quot;);   scanf(&quot;%d %d&quot;,&amp;m,&amp;n);   if (facsum(n)==m&amp;&amp;facsum(m)==n)    {        printf(&quot;%d和%d是友元\n&quot;,m,n);    }    else    {        printf(&quot;%d和%d不是友元\n&quot;,m,n);     }        return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
